
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d8  080035d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035e0  080035e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  080035f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080035f4  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f9c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e21  00000000  00000000  0002a01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000908  00000000  00000000  0002be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006de  00000000  00000000  0002c748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002135e  00000000  00000000  0002ce26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc06  00000000  00000000  0004e184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c84c0  00000000  00000000  00059d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023ac  00000000  00000000  0012224c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001245f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003580 	.word	0x08003580

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003580 	.word	0x08003580

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <ExcuteMemoryWrite>:
#define CRC_SUCCESS 1U
#define CRC_FAIL 0U
extern CRC_HandleTypeDef hcrc;
extern UART_HandleTypeDef huart2;
uint8_t ExcuteMemoryWrite(uint8_t* Buffer,uint32_t Address,uint8_t Length)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	4613      	mov	r3, r2
 800050c:	71fb      	strb	r3, [r7, #7]
	uint8_t ErrorStatus=HAL_OK;
 800050e:	2300      	movs	r3, #0
 8000510:	757b      	strb	r3, [r7, #21]
	if(Address>=FLASH_BASE&&Address<=FLASH_END)
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000518:	d324      	bcc.n	8000564 <ExcuteMemoryWrite+0x64>
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <ExcuteMemoryWrite+0x98>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d820      	bhi.n	8000564 <ExcuteMemoryWrite+0x64>
	{
		uint8_t Iterator ;
		HAL_FLASH_Unlock();
 8000522:	f001 f92f 	bl	8001784 <HAL_FLASH_Unlock>
		for(Iterator=0;Iterator<Length;Iterator++)
 8000526:	2300      	movs	r3, #0
 8000528:	75fb      	strb	r3, [r7, #23]
 800052a:	e014      	b.n	8000556 <ExcuteMemoryWrite+0x56>
		{
			ErrorStatus=HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address+Iterator, Buffer[Iterator]);
 800052c:	7dfa      	ldrb	r2, [r7, #23]
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	18d1      	adds	r1, r2, r3
 8000532:	7dfb      	ldrb	r3, [r7, #23]
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	4413      	add	r3, r2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	2200      	movs	r2, #0
 800053e:	461c      	mov	r4, r3
 8000540:	4615      	mov	r5, r2
 8000542:	4622      	mov	r2, r4
 8000544:	462b      	mov	r3, r5
 8000546:	2000      	movs	r0, #0
 8000548:	f001 f8c8 	bl	80016dc <HAL_FLASH_Program>
 800054c:	4603      	mov	r3, r0
 800054e:	757b      	strb	r3, [r7, #21]
		for(Iterator=0;Iterator<Length;Iterator++)
 8000550:	7dfb      	ldrb	r3, [r7, #23]
 8000552:	3301      	adds	r3, #1
 8000554:	75fb      	strb	r3, [r7, #23]
 8000556:	7dfa      	ldrb	r2, [r7, #23]
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	429a      	cmp	r2, r3
 800055c:	d3e6      	bcc.n	800052c <ExcuteMemoryWrite+0x2c>
		}
		HAL_FLASH_Lock();
 800055e:	f001 f933 	bl	80017c8 <HAL_FLASH_Lock>
	{
 8000562:	e013      	b.n	800058c <ExcuteMemoryWrite+0x8c>
	}
	else
	{
		/*writing in sram*/
		uint8_t Iterator ;
		uint8_t* DestinationAddress=(uint8_t*)Address;
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	613b      	str	r3, [r7, #16]
		for(Iterator=0;Iterator<Length;Iterator++)
 8000568:	2300      	movs	r3, #0
 800056a:	75bb      	strb	r3, [r7, #22]
 800056c:	e00a      	b.n	8000584 <ExcuteMemoryWrite+0x84>
			{
				DestinationAddress[Iterator]=Buffer[Iterator];
 800056e:	7dbb      	ldrb	r3, [r7, #22]
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	441a      	add	r2, r3
 8000574:	7dbb      	ldrb	r3, [r7, #22]
 8000576:	6939      	ldr	r1, [r7, #16]
 8000578:	440b      	add	r3, r1
 800057a:	7812      	ldrb	r2, [r2, #0]
 800057c:	701a      	strb	r2, [r3, #0]
		for(Iterator=0;Iterator<Length;Iterator++)
 800057e:	7dbb      	ldrb	r3, [r7, #22]
 8000580:	3301      	adds	r3, #1
 8000582:	75bb      	strb	r3, [r7, #22]
 8000584:	7dba      	ldrb	r2, [r7, #22]
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	429a      	cmp	r2, r3
 800058a:	d3f0      	bcc.n	800056e <ExcuteMemoryWrite+0x6e>
			}
	}
}
 800058c:	bf00      	nop
 800058e:	4618      	mov	r0, r3
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bdb0      	pop	{r4, r5, r7, pc}
 8000596:	bf00      	nop
 8000598:	0807ffff 	.word	0x0807ffff

0800059c <ValidateAddress>:
static uint8_t ValidateAddress(uint32_t Address)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	/*Address is valid with in flash or ram*/
	uint8_t state;
	if(Address>=FLASH_BASE&&Address<=FLASH_END)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80005aa:	d306      	bcc.n	80005ba <ValidateAddress+0x1e>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <ValidateAddress+0x48>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d802      	bhi.n	80005ba <ValidateAddress+0x1e>
	{
		state=VALID_ADDRESS;
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	e00c      	b.n	80005d4 <ValidateAddress+0x38>
	}
	else if(Address>=SRAM_BASE&&Address<=(SRAM_BASE+128*1024))
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005c0:	d306      	bcc.n	80005d0 <ValidateAddress+0x34>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <ValidateAddress+0x4c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d802      	bhi.n	80005d0 <ValidateAddress+0x34>
	{
		state=VALID_ADDRESS;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e001      	b.n	80005d4 <ValidateAddress+0x38>
	}
	else
		state=INVALID_ADDRESS;
 80005d0:	2301      	movs	r3, #1
 80005d2:	73fb      	strb	r3, [r7, #15]
	return state;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	0807ffff 	.word	0x0807ffff
 80005e8:	20020000 	.word	0x20020000

080005ec <excuteFlashErase>:
static uint8_t excuteFlashErase(uint8_t sectorNumber,uint8_t NumberOfSectors)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	 HAL_StatusTypeDef ErrorState =HAL_OK;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	 if(NumberOfSectors>8 && NumberOfSectors!=0xFF )
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	2b08      	cmp	r3, #8
 8000606:	d906      	bls.n	8000616 <excuteFlashErase+0x2a>
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	2bff      	cmp	r3, #255	; 0xff
 800060c:	d003      	beq.n	8000616 <excuteFlashErase+0x2a>
	 {
		 ErrorState=HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000614:	e035      	b.n	8000682 <excuteFlashErase+0x96>
	 }
	 else if(sectorNumber>7 && NumberOfSectors!=0xFF  )
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b07      	cmp	r3, #7
 800061a:	d906      	bls.n	800062a <excuteFlashErase+0x3e>
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	2bff      	cmp	r3, #255	; 0xff
 8000620:	d003      	beq.n	800062a <excuteFlashErase+0x3e>
	 {
		 ErrorState=HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000628:	e02b      	b.n	8000682 <excuteFlashErase+0x96>
	 }
	 else
	 {
		 FLASH_EraseInitTypeDef MyErease;
		 uint32_t SectorError;
		 if(sectorNumber==0xFF)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2bff      	cmp	r3, #255	; 0xff
 800062e:	d102      	bne.n	8000636 <excuteFlashErase+0x4a>
		 {
			 MyErease.TypeErase=FLASH_TYPEERASE_MASSERASE;
 8000630:	2301      	movs	r3, #1
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	e012      	b.n	800065c <excuteFlashErase+0x70>

		 }
		 else
		 {
			 uint8_t RemaningSector =8-sectorNumber;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f1c3 0308 	rsb	r3, r3, #8
 800063c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			 if(NumberOfSectors>RemaningSector)
 8000640:	79ba      	ldrb	r2, [r7, #6]
 8000642:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000646:	429a      	cmp	r2, r3
 8000648:	d902      	bls.n	8000650 <excuteFlashErase+0x64>
			 {
				 NumberOfSectors=RemaningSector;
 800064a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800064e:	71bb      	strb	r3, [r7, #6]
			 }
			 else
			 {

			 }
			 MyErease.TypeErase=FLASH_TYPEERASE_SECTORS;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
			 MyErease.Sector=sectorNumber;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	61bb      	str	r3, [r7, #24]
			 MyErease.NbSectors=NumberOfSectors;
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	61fb      	str	r3, [r7, #28]

		 }
		 MyErease.VoltageRange=FLASH_VOLTAGE_RANGE_3;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
		 MyErease.Banks=FLASH_BANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
		 HAL_FLASH_Unlock();
 8000664:	f001 f88e 	bl	8001784 <HAL_FLASH_Unlock>
		 ErrorState =HAL_FLASHEx_Erase(&MyErease, &SectorError);
 8000668:	f107 020c 	add.w	r2, r7, #12
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fa24 	bl	8001ac0 <HAL_FLASHEx_Erase>
 8000678:	4603      	mov	r3, r0
 800067a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 HAL_FLASH_Lock();
 800067e:	f001 f8a3 	bl	80017c8 <HAL_FLASH_Lock>
	 }
	 return ErrorState;
 8000682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000686:	4618      	mov	r0, r3
 8000688:	3728      	adds	r7, #40	; 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <VerifyCrc>:
static uint8_t VerifyCrc(uint8_t* DataArr,uint8_t Length,uint32_t HostCRC)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	460b      	mov	r3, r1
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	72fb      	strb	r3, [r7, #11]
	uint8_t Iterator;
	uint8_t CrcStatus;
	uint32_t AccumulateCRC,Temp;
	for(Iterator=0;Iterator<Length;Iterator++)
 800069e:	2300      	movs	r3, #0
 80006a0:	77fb      	strb	r3, [r7, #31]
 80006a2:	e00f      	b.n	80006c4 <VerifyCrc+0x34>
	{
		Temp =DataArr[Iterator];
 80006a4:	7ffb      	ldrb	r3, [r7, #31]
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	617b      	str	r3, [r7, #20]
		AccumulateCRC=HAL_CRC_Accumulate(&hcrc, &Temp, 1);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2201      	movs	r2, #1
 80006b4:	4619      	mov	r1, r3
 80006b6:	4810      	ldr	r0, [pc, #64]	; (80006f8 <VerifyCrc+0x68>)
 80006b8:	f000 ffe5 	bl	8001686 <HAL_CRC_Accumulate>
 80006bc:	61b8      	str	r0, [r7, #24]
	for(Iterator=0;Iterator<Length;Iterator++)
 80006be:	7ffb      	ldrb	r3, [r7, #31]
 80006c0:	3301      	adds	r3, #1
 80006c2:	77fb      	strb	r3, [r7, #31]
 80006c4:	7ffa      	ldrb	r2, [r7, #31]
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d3eb      	bcc.n	80006a4 <VerifyCrc+0x14>
	}
	/*reset for crc*/
__HAL_CRC_DR_RESET(&hcrc);
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <VerifyCrc+0x68>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <VerifyCrc+0x68>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f042 0201 	orr.w	r2, r2, #1
 80006da:	609a      	str	r2, [r3, #8]
if(AccumulateCRC==HostCRC)
 80006dc:	69ba      	ldr	r2, [r7, #24]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d102      	bne.n	80006ea <VerifyCrc+0x5a>
{
	CrcStatus =CRC_SUCCESS;
 80006e4:	2301      	movs	r3, #1
 80006e6:	77bb      	strb	r3, [r7, #30]
 80006e8:	e001      	b.n	80006ee <VerifyCrc+0x5e>
}
else
{
	CrcStatus =CRC_FAIL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	77bb      	strb	r3, [r7, #30]
}
	return CrcStatus;
 80006ee:	7fbb      	ldrb	r3, [r7, #30]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000028 	.word	0x20000028

080006fc <SendAck>:

static void SendAck(uint8_t ReplyLength)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	uint8_t AckBuffer[]={BL_ACK,ReplyLength};
 8000706:	23a5      	movs	r3, #165	; 0xa5
 8000708:	733b      	strb	r3, [r7, #12]
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart2, AckBuffer,2, HAL_MAX_DELAY);
 800070e:	f107 010c 	add.w	r1, r7, #12
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	2202      	movs	r2, #2
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <SendAck+0x2c>)
 800071a:	f002 faee 	bl	8002cfa <HAL_UART_Transmit>
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000030 	.word	0x20000030

0800072c <SendNack>:
static void SendNack()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
	uint8_t NackBuffer[]={BL_NACK};
 8000732:	237f      	movs	r3, #127	; 0x7f
 8000734:	713b      	strb	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, NackBuffer,1, HAL_MAX_DELAY);
 8000736:	1d39      	adds	r1, r7, #4
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	2201      	movs	r2, #1
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <SendNack+0x20>)
 8000740:	f002 fadb 	bl	8002cfa <HAL_UART_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000030 	.word	0x20000030

08000750 <BL_HandleGetVerCmd>:
void BL_HandleGetVerCmd(uint8_t* CmdPacket)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
uint8_t BootLoaderVer,CrcStatus,CmdLength;
uint32_t HostCrc;
CmdLength =CmdPacket[0]+1;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	75fb      	strb	r3, [r7, #23]
HostCrc =*((uint32_t*)(CmdPacket+CmdLength-4));
 8000760:	7dfb      	ldrb	r3, [r7, #23]
 8000762:	3b04      	subs	r3, #4
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	613b      	str	r3, [r7, #16]
CrcStatus =VerifyCrc(CmdPacket, CmdLength-4,HostCrc);
 800076c:	7dfb      	ldrb	r3, [r7, #23]
 800076e:	3b04      	subs	r3, #4
 8000770:	b2db      	uxtb	r3, r3
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	4619      	mov	r1, r3
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ff8a 	bl	8000690 <VerifyCrc>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
if(CrcStatus==CRC_SUCCESS)
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10d      	bne.n	80007a2 <BL_HandleGetVerCmd+0x52>
{
	SendAck(1);
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff ffb8 	bl	80006fc <SendAck>
	BootLoaderVer =BL_VERSION;
 800078c:	2301      	movs	r3, #1
 800078e:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart2, &BootLoaderVer, 1, HAL_MAX_DELAY);
 8000790:	f107 010e 	add.w	r1, r7, #14
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	2201      	movs	r2, #1
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <BL_HandleGetVerCmd+0x60>)
 800079c:	f002 faad 	bl	8002cfa <HAL_UART_Transmit>
{
	SendNack();
}


}
 80007a0:	e001      	b.n	80007a6 <BL_HandleGetVerCmd+0x56>
	SendNack();
 80007a2:	f7ff ffc3 	bl	800072c <SendNack>
}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000030 	.word	0x20000030

080007b4 <BL_HandleGetHelpCmd>:
void BL_HandleGetHelpCmd(uint8_t* CmdPacket)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	uint8_t CrcStatus,CmdLength;
	uint32_t HostCrc;
	CmdLength =CmdPacket[0]+1;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	77fb      	strb	r3, [r7, #31]
	HostCrc =*((uint32_t*)(CmdPacket+CmdLength-4));
 80007c4:	7ffb      	ldrb	r3, [r7, #31]
 80007c6:	3b04      	subs	r3, #4
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	61bb      	str	r3, [r7, #24]
	CrcStatus =VerifyCrc(CmdPacket, CmdLength-4,HostCrc);
 80007d0:	7ffb      	ldrb	r3, [r7, #31]
 80007d2:	3b04      	subs	r3, #4
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	69ba      	ldr	r2, [r7, #24]
 80007d8:	4619      	mov	r1, r3
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ff58 	bl	8000690 <VerifyCrc>
 80007e0:	4603      	mov	r3, r0
 80007e2:	75fb      	strb	r3, [r7, #23]
	if(CrcStatus==CRC_SUCCESS)
 80007e4:	7dfb      	ldrb	r3, [r7, #23]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d111      	bne.n	800080e <BL_HandleGetHelpCmd+0x5a>
	{
		uint8_t  BootLoaderCommands[]=
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <BL_HandleGetHelpCmd+0x68>)
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				BL_MEM_READ			,
				BL_READ_SECTOR_STATUS,
				BL_OTP_READ		    ,
				BL_DIS_WR_PROTECT
		};
		SendAck(sizeof(BootLoaderCommands));
 80007f6:	200c      	movs	r0, #12
 80007f8:	f7ff ff80 	bl	80006fc <SendAck>
		HAL_UART_Transmit(&huart2, BootLoaderCommands, sizeof(BootLoaderCommands),HAL_MAX_DELAY);
 80007fc:	f107 0108 	add.w	r1, r7, #8
 8000800:	f04f 33ff 	mov.w	r3, #4294967295
 8000804:	220c      	movs	r2, #12
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <BL_HandleGetHelpCmd+0x6c>)
 8000808:	f002 fa77 	bl	8002cfa <HAL_UART_Transmit>
	else
	{
		SendNack();
	}

}
 800080c:	e001      	b.n	8000812 <BL_HandleGetHelpCmd+0x5e>
		SendNack();
 800080e:	f7ff ff8d 	bl	800072c <SendNack>
}
 8000812:	bf00      	nop
 8000814:	3720      	adds	r7, #32
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08003598 	.word	0x08003598
 8000820:	20000030 	.word	0x20000030

08000824 <BL_HandleGetCIDCmd>:
void BL_HandleGetCIDCmd(uint8_t* CmdPacket)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	uint8_t CrcStatus,CmdLength;
		uint32_t HostCrc;
		CmdLength =CmdPacket[0]+1;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	75fb      	strb	r3, [r7, #23]
		HostCrc =*((uint32_t*)(CmdPacket+CmdLength-4));
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	3b04      	subs	r3, #4
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	613b      	str	r3, [r7, #16]
		CrcStatus =VerifyCrc(CmdPacket, CmdLength-4,HostCrc);
 8000840:	7dfb      	ldrb	r3, [r7, #23]
 8000842:	3b04      	subs	r3, #4
 8000844:	b2db      	uxtb	r3, r3
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	4619      	mov	r1, r3
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ff20 	bl	8000690 <VerifyCrc>
 8000850:	4603      	mov	r3, r0
 8000852:	73fb      	strb	r3, [r7, #15]
		if(CrcStatus==CRC_SUCCESS)
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d112      	bne.n	8000880 <BL_HandleGetCIDCmd+0x5c>
		{
			uint16_t DeviceId =DBMCU_IDCODE &0X0FFF;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <BL_HandleGetCIDCmd+0x68>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	b29b      	uxth	r3, r3
 8000860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000864:	b29b      	uxth	r3, r3
 8000866:	81bb      	strh	r3, [r7, #12]
			SendAck(2);
 8000868:	2002      	movs	r0, #2
 800086a:	f7ff ff47 	bl	80006fc <SendAck>
			HAL_UART_Transmit(&huart2, (uint8_t*)&DeviceId, 2, HAL_MAX_DELAY);
 800086e:	f107 010c 	add.w	r1, r7, #12
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	2202      	movs	r2, #2
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <BL_HandleGetCIDCmd+0x6c>)
 800087a:	f002 fa3e 	bl	8002cfa <HAL_UART_Transmit>
		else
		{
			SendNack();
		}

}
 800087e:	e001      	b.n	8000884 <BL_HandleGetCIDCmd+0x60>
			SendNack();
 8000880:	f7ff ff54 	bl	800072c <SendNack>
}
 8000884:	bf00      	nop
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	e0042000 	.word	0xe0042000
 8000890:	20000030 	.word	0x20000030

08000894 <BL_HandleGetRdpStatusCmd>:
void BL_HandleGetRdpStatusCmd(uint8_t* CmdPacket)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	uint8_t CrcStatus,CmdLength;
		uint32_t HostCrc;
		CmdLength =CmdPacket[0]+1;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	75fb      	strb	r3, [r7, #23]
		HostCrc =*((uint32_t*)(CmdPacket+CmdLength-4));
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	3b04      	subs	r3, #4
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	613b      	str	r3, [r7, #16]
		CrcStatus =VerifyCrc(CmdPacket, CmdLength-4,HostCrc);
 80008b0:	7dfb      	ldrb	r3, [r7, #23]
 80008b2:	3b04      	subs	r3, #4
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4619      	mov	r1, r3
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fee8 	bl	8000690 <VerifyCrc>
 80008c0:	4603      	mov	r3, r0
 80008c2:	73fb      	strb	r3, [r7, #15]
		if(CrcStatus==CRC_SUCCESS)
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d115      	bne.n	80008f6 <BL_HandleGetRdpStatusCmd+0x62>
		{
			uint8_t RdPStatus =(uint8_t)((RDP_USER_OPTION_WORD>>8)&&0xff);
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <BL_HandleGetRdpStatusCmd+0x70>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <BL_HandleGetRdpStatusCmd+0x44>
 80008d4:	2301      	movs	r3, #1
 80008d6:	e000      	b.n	80008da <BL_HandleGetRdpStatusCmd+0x46>
 80008d8:	2300      	movs	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	73bb      	strb	r3, [r7, #14]
			SendAck(1);
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff ff0c 	bl	80006fc <SendAck>
			HAL_UART_Transmit(&huart2, &RdPStatus, 1, HAL_MAX_DELAY);
 80008e4:	f107 010e 	add.w	r1, r7, #14
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	2201      	movs	r2, #1
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <BL_HandleGetRdpStatusCmd+0x74>)
 80008f0:	f002 fa03 	bl	8002cfa <HAL_UART_Transmit>
		else
		{
			SendNack();
		}

}
 80008f4:	e001      	b.n	80008fa <BL_HandleGetRdpStatusCmd+0x66>
			SendNack();
 80008f6:	f7ff ff19 	bl	800072c <SendNack>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	1fffc000 	.word	0x1fffc000
 8000908:	20000030 	.word	0x20000030

0800090c <BL_HandleGoToAddressCmd>:
void BL_HandleGoToAddressCmd(uint8_t* CmdPacket)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	uint8_t CrcStatus,CmdLength;
		uint32_t HostCrc;
		CmdLength =CmdPacket[0]+1;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	77fb      	strb	r3, [r7, #31]
		HostCrc =*((uint32_t*)(CmdPacket+CmdLength-4));
 800091c:	7ffb      	ldrb	r3, [r7, #31]
 800091e:	3b04      	subs	r3, #4
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	4413      	add	r3, r2
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	61bb      	str	r3, [r7, #24]
		CrcStatus =VerifyCrc(CmdPacket, CmdLength-4,HostCrc);
 8000928:	7ffb      	ldrb	r3, [r7, #31]
 800092a:	3b04      	subs	r3, #4
 800092c:	b2db      	uxtb	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4619      	mov	r1, r3
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff feac 	bl	8000690 <VerifyCrc>
 8000938:	4603      	mov	r3, r0
 800093a:	75fb      	strb	r3, [r7, #23]
		if(CrcStatus==CRC_SUCCESS)
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d120      	bne.n	8000984 <BL_HandleGoToAddressCmd+0x78>
		{
			uint8_t validState ;
			SendAck(1);
 8000942:	2001      	movs	r0, #1
 8000944:	f7ff feda 	bl	80006fc <SendAck>
			/*abstract address*/
			uint32_t Address =*((uint32_t*)&CmdPacket[2]);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800094e:	613b      	str	r3, [r7, #16]
			validState =ValidateAddress(Address);
 8000950:	6938      	ldr	r0, [r7, #16]
 8000952:	f7ff fe23 	bl	800059c <ValidateAddress>
 8000956:	4603      	mov	r3, r0
 8000958:	72fb      	strb	r3, [r7, #11]
			if(validState==VALID_ADDRESS)
 800095a:	7afb      	ldrb	r3, [r7, #11]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d113      	bne.n	8000988 <BL_HandleGoToAddressCmd+0x7c>
			{
				HAL_UART_Transmit(&huart2, &validState, 1,HAL_MAX_DELAY);
 8000960:	f107 010b 	add.w	r1, r7, #11
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
 8000968:	2201      	movs	r2, #1
 800096a:	4809      	ldr	r0, [pc, #36]	; (8000990 <BL_HandleGoToAddressCmd+0x84>)
 800096c:	f002 f9c5 	bl	8002cfa <HAL_UART_Transmit>
				void (*functionPtr)(void)=NULL;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
				/*increament address by 1 to make t bit =1*/
				Address++;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	3301      	adds	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
				functionPtr=Address;
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	60fb      	str	r3, [r7, #12]
				functionPtr();
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	4798      	blx	r3
		else
		{
			SendNack();
		}

}
 8000982:	e001      	b.n	8000988 <BL_HandleGoToAddressCmd+0x7c>
			SendNack();
 8000984:	f7ff fed2 	bl	800072c <SendNack>
}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000030 	.word	0x20000030

08000994 <BL_HandleFlashEraseCmd>:
void BL_HandleFlashEraseCmd(uint8_t* CmdPacket)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	uint8_t CrcStatus,CmdLength;
		uint32_t HostCrc;
		CmdLength =CmdPacket[0]+1;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	75fb      	strb	r3, [r7, #23]
		HostCrc =*((uint32_t*)(CmdPacket+CmdLength-4));
 80009a4:	7dfb      	ldrb	r3, [r7, #23]
 80009a6:	3b04      	subs	r3, #4
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	613b      	str	r3, [r7, #16]
		CrcStatus =VerifyCrc(CmdPacket, CmdLength-4,HostCrc);
 80009b0:	7dfb      	ldrb	r3, [r7, #23]
 80009b2:	3b04      	subs	r3, #4
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4619      	mov	r1, r3
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fe68 	bl	8000690 <VerifyCrc>
 80009c0:	4603      	mov	r3, r0
 80009c2:	73fb      	strb	r3, [r7, #15]
		if(CrcStatus==CRC_SUCCESS)
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d117      	bne.n	80009fa <BL_HandleFlashEraseCmd+0x66>
		{
			uint8_t EreaseState;

			SendAck(1);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff fe96 	bl	80006fc <SendAck>

			EreaseState= excuteFlashErase(CmdPacket[2], CmdPacket[3]);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3302      	adds	r3, #2
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3303      	adds	r3, #3
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	4610      	mov	r0, r2
 80009e0:	f7ff fe04 	bl	80005ec <excuteFlashErase>
 80009e4:	4603      	mov	r3, r0
 80009e6:	73bb      	strb	r3, [r7, #14]
			HAL_UART_Transmit(&huart2, &EreaseState, 1, HAL_MAX_DELAY);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	2201      	movs	r2, #1
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <BL_HandleFlashEraseCmd+0x74>)
 80009f4:	f002 f981 	bl	8002cfa <HAL_UART_Transmit>
		else
		{
			SendNack();
		}

}
 80009f8:	e001      	b.n	80009fe <BL_HandleFlashEraseCmd+0x6a>
			SendNack();
 80009fa:	f7ff fe97 	bl	800072c <SendNack>
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000030 	.word	0x20000030

08000a0c <BL_HandleMemWriteCmd>:
void BL_HandleMemWriteCmd(uint8_t* CmdPacket)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	uint8_t CrcStatus,CmdLength;
		uint32_t HostCrc;
		CmdLength =CmdPacket[0]+1;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	77fb      	strb	r3, [r7, #31]
		HostCrc =*((uint32_t*)(CmdPacket+CmdLength-4));
 8000a1c:	7ffb      	ldrb	r3, [r7, #31]
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	61bb      	str	r3, [r7, #24]
		CrcStatus =VerifyCrc(CmdPacket, CmdLength-4,HostCrc);
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4619      	mov	r1, r3
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fe2c 	bl	8000690 <VerifyCrc>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	75fb      	strb	r3, [r7, #23]
		if(CrcStatus==CRC_SUCCESS)
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d126      	bne.n	8000a90 <BL_HandleMemWriteCmd+0x84>
		{
			SendAck(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff fe5a 	bl	80006fc <SendAck>
			uint8_t WritingStatus;
			uint32_t Address =*((uint32_t*)&CmdPacket[2]);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000a4e:	613b      	str	r3, [r7, #16]
			uint8_t AddressStatus =ValidateAddress(Address);
 8000a50:	6938      	ldr	r0, [r7, #16]
 8000a52:	f7ff fda3 	bl	800059c <ValidateAddress>
 8000a56:	4603      	mov	r3, r0
 8000a58:	73fb      	strb	r3, [r7, #15]
			if(AddressStatus==VALID_ADDRESS)
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10c      	bne.n	8000a7a <BL_HandleMemWriteCmd+0x6e>
			{
				uint8_t PayloadLength =CmdPacket[6];
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	799b      	ldrb	r3, [r3, #6]
 8000a64:	73bb      	strb	r3, [r7, #14]
				WritingStatus=ExcuteMemoryWrite(&CmdPacket[7],Address,PayloadLength);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3307      	adds	r3, #7
 8000a6a:	7bba      	ldrb	r2, [r7, #14]
 8000a6c:	6939      	ldr	r1, [r7, #16]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fd46 	bl	8000500 <ExcuteMemoryWrite>
 8000a74:	4603      	mov	r3, r0
 8000a76:	737b      	strb	r3, [r7, #13]
 8000a78:	e001      	b.n	8000a7e <BL_HandleMemWriteCmd+0x72>
			}
			else
			{
				WritingStatus=1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	737b      	strb	r3, [r7, #13]
			}
			HAL_UART_Transmit(&huart2, &WritingStatus, 1, HAL_MAX_DELAY);
 8000a7e:	f107 010d 	add.w	r1, r7, #13
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	2201      	movs	r2, #1
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <BL_HandleMemWriteCmd+0x90>)
 8000a8a:	f002 f936 	bl	8002cfa <HAL_UART_Transmit>
		else
		{
			SendNack();
		}

}
 8000a8e:	e001      	b.n	8000a94 <BL_HandleMemWriteCmd+0x88>
			SendNack();
 8000a90:	f7ff fe4c 	bl	800072c <SendNack>
}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000030 	.word	0x20000030

08000aa0 <BL_HandleMemReadCmd>:
void BL_HandleMemReadCmd(uint8_t* CmdPacket)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	uint8_t CrcStatus,CmdLength;
		uint32_t HostCrc;
		CmdLength =CmdPacket[0]+1;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	76fb      	strb	r3, [r7, #27]
		HostCrc =*((uint32_t*)(CmdPacket+CmdLength-4));
 8000ab0:	7efb      	ldrb	r3, [r7, #27]
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	617b      	str	r3, [r7, #20]
		CrcStatus =VerifyCrc(CmdPacket, CmdLength-4,HostCrc);
 8000abc:	7efb      	ldrb	r3, [r7, #27]
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fde2 	bl	8000690 <VerifyCrc>
 8000acc:	4603      	mov	r3, r0
 8000ace:	74fb      	strb	r3, [r7, #19]
		if(CrcStatus==CRC_SUCCESS)
 8000ad0:	7cfb      	ldrb	r3, [r7, #19]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d122      	bne.n	8000b1c <BL_HandleMemReadCmd+0x7c>
		{
			uint8_t Length;
			uint32_t Address,Iterator;
			Length=CmdPacket[6];
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	799b      	ldrb	r3, [r3, #6]
 8000ada:	74bb      	strb	r3, [r7, #18]
			Address= *((uint32_t*)&CmdPacket[2]);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000ae2:	60fb      	str	r3, [r7, #12]
			SendAck(Length);
 8000ae4:	7cbb      	ldrb	r3, [r7, #18]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fe08 	bl	80006fc <SendAck>
			for(Iterator=0;Iterator<Length;Iterator++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	e00f      	b.n	8000b12 <BL_HandleMemReadCmd+0x72>
			{
				uint8_t Value=*((uint8_t*)Address+Iterator);
 8000af2:	69fa      	ldr	r2, [r7, #28]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	72fb      	strb	r3, [r7, #11]
				HAL_UART_Transmit(&huart2, &Value, 1, HAL_MAX_DELAY);
 8000afc:	f107 010b 	add.w	r1, r7, #11
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	2201      	movs	r2, #1
 8000b06:	4808      	ldr	r0, [pc, #32]	; (8000b28 <BL_HandleMemReadCmd+0x88>)
 8000b08:	f002 f8f7 	bl	8002cfa <HAL_UART_Transmit>
			for(Iterator=0;Iterator<Length;Iterator++)
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	61fb      	str	r3, [r7, #28]
 8000b12:	7cbb      	ldrb	r3, [r7, #18]
 8000b14:	69fa      	ldr	r2, [r7, #28]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d3eb      	bcc.n	8000af2 <BL_HandleMemReadCmd+0x52>
		else
		{
			SendNack();
		}

}
 8000b1a:	e001      	b.n	8000b20 <BL_HandleMemReadCmd+0x80>
			SendNack();
 8000b1c:	f7ff fe06 	bl	800072c <SendNack>
}
 8000b20:	bf00      	nop
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000030 	.word	0x20000030

08000b2c <BL_HandleEnRwProtectionCmd>:
void BL_HandleEnRwProtectionCmd(uint8_t* CmdPacket)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
		uint8_t CrcStatus,CmdLength;
			uint32_t HostCrc;
			CmdLength =CmdPacket[0]+1;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	75fb      	strb	r3, [r7, #23]
			HostCrc =*((uint32_t*)(CmdPacket+CmdLength-4));
 8000b3c:	7dfb      	ldrb	r3, [r7, #23]
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	613b      	str	r3, [r7, #16]
			CrcStatus =VerifyCrc(CmdPacket, CmdLength-4,HostCrc);
 8000b48:	7dfb      	ldrb	r3, [r7, #23]
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4619      	mov	r1, r3
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff fd9c 	bl	8000690 <VerifyCrc>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
			if(CrcStatus==CRC_SUCCESS)
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d137      	bne.n	8000bd2 <BL_HandleEnRwProtectionCmd+0xa6>
			{
				SendAck(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff fdca 	bl	80006fc <SendAck>
				if(CmdPacket[3]==1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3303      	adds	r3, #3
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d131      	bne.n	8000bd6 <BL_HandleEnRwProtectionCmd+0xaa>
				{
					uint8_t status=0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73bb      	strb	r3, [r7, #14]
					/*WRITE PROTECTION*/
					HAL_FLASH_OB_Unlock();
 8000b76:	f000 fe37 	bl	80017e8 <HAL_FLASH_OB_Unlock>
					while(BIT_IS_SET(FLASH_SR_REG,16));
 8000b7a:	bf00      	nop
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <BL_HandleEnRwProtectionCmd+0xb4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1f9      	bne.n	8000b7c <BL_HandleEnRwProtectionCmd+0x50>
					CLEAR_BIT(OPTCR_REG,31);
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <BL_HandleEnRwProtectionCmd+0xb8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <BL_HandleEnRwProtectionCmd+0xb8>)
 8000b8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	6013      	str	r3, [r2, #0]
					NWRP_Byte=~CmdPacket[2];
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3302      	adds	r3, #2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <BL_HandleEnRwProtectionCmd+0xbc>)
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	7013      	strb	r3, [r2, #0]
					SET_BIT(OPTCR_REG,1);
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <BL_HandleEnRwProtectionCmd+0xb8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <BL_HandleEnRwProtectionCmd+0xb8>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6013      	str	r3, [r2, #0]
					while(BIT_IS_SET(FLASH_SR_REG,16));
 8000bae:	bf00      	nop
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <BL_HandleEnRwProtectionCmd+0xb4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1f9      	bne.n	8000bb0 <BL_HandleEnRwProtectionCmd+0x84>
					HAL_FLASH_OB_Lock();
 8000bbc:	f000 fe30 	bl	8001820 <HAL_FLASH_OB_Lock>
					HAL_UART_Transmit(&huart2,&status, 1, HAL_MAX_DELAY);
 8000bc0:	f107 010e 	add.w	r1, r7, #14
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4808      	ldr	r0, [pc, #32]	; (8000bec <BL_HandleEnRwProtectionCmd+0xc0>)
 8000bcc:	f002 f895 	bl	8002cfa <HAL_UART_Transmit>
			}
			else
			{
				SendNack();
			}
}
 8000bd0:	e001      	b.n	8000bd6 <BL_HandleEnRwProtectionCmd+0xaa>
				SendNack();
 8000bd2:	f7ff fdab 	bl	800072c <SendNack>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023c0c 	.word	0x40023c0c
 8000be4:	40023c14 	.word	0x40023c14
 8000be8:	40023c16 	.word	0x40023c16
 8000bec:	20000030 	.word	0x20000030

08000bf0 <BL_HandleReadSectorStatusCmd>:
void BL_HandleReadSectorStatusCmd(uint8_t* CmdPacket)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	uint8_t CrcStatus,CmdLength,optionBytesStatus;
		uint32_t HostCrc;
		CmdLength =CmdPacket[0]+1;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	75fb      	strb	r3, [r7, #23]
		HostCrc =*((uint32_t*)(CmdPacket+CmdLength-4));
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
 8000c02:	3b04      	subs	r3, #4
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	613b      	str	r3, [r7, #16]
		CrcStatus =VerifyCrc(CmdPacket, CmdLength-4,HostCrc);
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4619      	mov	r1, r3
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fd3a 	bl	8000690 <VerifyCrc>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73fb      	strb	r3, [r7, #15]
		if(CrcStatus==CRC_SUCCESS)
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d10f      	bne.n	8000c46 <BL_HandleReadSectorStatusCmd+0x56>
		{
			SendAck(1);
 8000c26:	2001      	movs	r0, #1
 8000c28:	f7ff fd68 	bl	80006fc <SendAck>
			optionBytesStatus=NWRP_WORD;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <BL_HandleReadSectorStatusCmd+0x64>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	73bb      	strb	r3, [r7, #14]
			HAL_UART_Transmit(&huart2, &optionBytesStatus, 1, HAL_MAX_DELAY);
 8000c34:	f107 010e 	add.w	r1, r7, #14
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <BL_HandleReadSectorStatusCmd+0x68>)
 8000c40:	f002 f85b 	bl	8002cfa <HAL_UART_Transmit>
		else
		{
			SendNack();
		}

}
 8000c44:	e001      	b.n	8000c4a <BL_HandleReadSectorStatusCmd+0x5a>
			SendNack();
 8000c46:	f7ff fd71 	bl	800072c <SendNack>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	1fffc008 	.word	0x1fffc008
 8000c58:	20000030 	.word	0x20000030

08000c5c <BL_HandleOtpReadCmd>:
void BL_HandleOtpReadCmd(uint8_t* CmdPacket)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	uint8_t CrcStatus,CmdLength;
		uint32_t HostCrc;
		CmdLength =CmdPacket[0]+1;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	75fb      	strb	r3, [r7, #23]
		HostCrc =*((uint32_t*)(CmdPacket+CmdLength-4));
 8000c6c:	7dfb      	ldrb	r3, [r7, #23]
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	4413      	add	r3, r2
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	613b      	str	r3, [r7, #16]
		CrcStatus =VerifyCrc(CmdPacket, CmdLength-4,HostCrc);
 8000c78:	7dfb      	ldrb	r3, [r7, #23]
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4619      	mov	r1, r3
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fd04 	bl	8000690 <VerifyCrc>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]
		if(CrcStatus==CRC_SUCCESS)
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d103      	bne.n	8000c9a <BL_HandleOtpReadCmd+0x3e>
		{
			SendAck(1);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff fd32 	bl	80006fc <SendAck>
		else
		{
			SendNack();
		}

}
 8000c98:	e001      	b.n	8000c9e <BL_HandleOtpReadCmd+0x42>
			SendNack();
 8000c9a:	f7ff fd47 	bl	800072c <SendNack>
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <BL_HandleDisRwProtectionCmd>:
void BL_HandleDisRwProtectionCmd(uint8_t* CmdPacket)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	uint8_t CrcStatus,CmdLength;
		uint32_t HostCrc;
		CmdLength =CmdPacket[0]+1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	75fb      	strb	r3, [r7, #23]
		HostCrc =*((uint32_t*)(CmdPacket+CmdLength-4));
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	613b      	str	r3, [r7, #16]
		CrcStatus =VerifyCrc(CmdPacket, CmdLength-4,HostCrc);
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fcde 	bl	8000690 <VerifyCrc>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]
		if(CrcStatus==CRC_SUCCESS)
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d131      	bne.n	8000d42 <BL_HandleDisRwProtectionCmd+0x9a>
		{
			uint8_t status=0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73bb      	strb	r3, [r7, #14]
			SendAck(1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff fd0a 	bl	80006fc <SendAck>
			HAL_FLASH_OB_Unlock();
 8000ce8:	f000 fd7e 	bl	80017e8 <HAL_FLASH_OB_Unlock>
			while(BIT_IS_SET(FLASH_SR_REG,16));
 8000cec:	bf00      	nop
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <BL_HandleDisRwProtectionCmd+0xa8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f9      	bne.n	8000cee <BL_HandleDisRwProtectionCmd+0x46>
			CLEAR_BIT(OPTCR_REG,31);
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <BL_HandleDisRwProtectionCmd+0xac>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <BL_HandleDisRwProtectionCmd+0xac>)
 8000d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d04:	6013      	str	r3, [r2, #0]
			OPTCR_REG|=(0xff<<16);
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <BL_HandleDisRwProtectionCmd+0xac>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <BL_HandleDisRwProtectionCmd+0xac>)
 8000d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000d10:	6013      	str	r3, [r2, #0]
			SET_BIT(OPTCR_REG,1);
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <BL_HandleDisRwProtectionCmd+0xac>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <BL_HandleDisRwProtectionCmd+0xac>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6013      	str	r3, [r2, #0]
			while(BIT_IS_SET(FLASH_SR_REG,16));
 8000d1e:	bf00      	nop
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <BL_HandleDisRwProtectionCmd+0xa8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1f9      	bne.n	8000d20 <BL_HandleDisRwProtectionCmd+0x78>
			HAL_FLASH_OB_Lock();
 8000d2c:	f000 fd78 	bl	8001820 <HAL_FLASH_OB_Lock>
			HAL_UART_Transmit(&huart2,&status, 1, HAL_MAX_DELAY);
 8000d30:	f107 010e 	add.w	r1, r7, #14
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4807      	ldr	r0, [pc, #28]	; (8000d58 <BL_HandleDisRwProtectionCmd+0xb0>)
 8000d3c:	f001 ffdd 	bl	8002cfa <HAL_UART_Transmit>
		else
		{
			SendNack();
		}

}
 8000d40:	e001      	b.n	8000d46 <BL_HandleDisRwProtectionCmd+0x9e>
			SendNack();
 8000d42:	f7ff fcf3 	bl	800072c <SendNack>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c0c 	.word	0x40023c0c
 8000d54:	40023c14 	.word	0x40023c14
 8000d58:	20000030 	.word	0x20000030

08000d5c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d5c:	b5b0      	push	{r4, r5, r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char helooBootLoader []="hello  from boat loader\r\n";
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <main+0x5c>)
 8000d64:	1d3c      	adds	r4, r7, #4
 8000d66:	461d      	mov	r5, r3
 8000d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d70:	c403      	stmia	r4!, {r0, r1}
 8000d72:	8022      	strh	r2, [r4, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d74:	f000 faf0 	bl	8001358 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d78:	f000 f824 	bl	8000dc4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d7c:	f000 f8ce 	bl	8000f1c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000d80:	f000 f8a2 	bl	8000ec8 <MX_USART2_UART_Init>
	MX_CRC_Init();
 8000d84:	f000 f88c 	bl	8000ea0 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	if(HAL_GPIO_ReadPin(C7_GPIO_Port, C7_Pin)==GPIO_PIN_RESET)
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	480c      	ldr	r0, [pc, #48]	; (8000dbc <main+0x60>)
 8000d8c:	f001 f94e 	bl	800202c <HAL_GPIO_ReadPin>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <main+0x40>
	{
		BootLoader_UartReadData();
 8000d96:	f000 f93d 	bl	8001014 <BootLoader_UartReadData>
 8000d9a:	e001      	b.n	8000da0 <main+0x44>
	}
	else
	{
		BootLoader_JumpToApp();
 8000d9c:	f000 f9c6 	bl	800112c <BootLoader_JumpToApp>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)helooBootLoader, sizeof(helooBootLoader), HAL_MAX_DELAY);
 8000da0:	1d39      	adds	r1, r7, #4
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	221a      	movs	r2, #26
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <main+0x64>)
 8000daa:	f001 ffa6 	bl	8002cfa <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000dae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000db2:	f000 fb43 	bl	800143c <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)helooBootLoader, sizeof(helooBootLoader), HAL_MAX_DELAY);
 8000db6:	e7f3      	b.n	8000da0 <main+0x44>
 8000db8:	080035a4 	.word	0x080035a4
 8000dbc:	40020800 	.word	0x40020800
 8000dc0:	20000030 	.word	0x20000030

08000dc4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b094      	sub	sp, #80	; 0x50
 8000dc8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2234      	movs	r2, #52	; 0x34
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 fba8 	bl	8003528 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <SystemClock_Config+0xd4>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	4a29      	ldr	r2, [pc, #164]	; (8000e98 <SystemClock_Config+0xd4>)
 8000df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df6:	6413      	str	r3, [r2, #64]	; 0x40
 8000df8:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <SystemClock_Config+0xd4>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e04:	2300      	movs	r3, #0
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <SystemClock_Config+0xd8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e10:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <SystemClock_Config+0xd8>)
 8000e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <SystemClock_Config+0xd8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e30:	2302      	movs	r3, #2
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000e38:	2310      	movs	r3, #16
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000e3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e40:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e42:	2304      	movs	r3, #4
 8000e44:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e46:	2302      	movs	r3, #2
 8000e48:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fc66 	bl	8002724 <HAL_RCC_OscConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000e5e:	f000 f97d 	bl	800115c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	230f      	movs	r3, #15
 8000e64:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e66:	2302      	movs	r3, #2
 8000e68:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e72:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 f906 	bl	8002090 <HAL_RCC_ClockConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000e8a:	f000 f967 	bl	800115c <Error_Handler>
	}
}
 8000e8e:	bf00      	nop
 8000e90:	3750      	adds	r7, #80	; 0x50
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_CRC_Init+0x20>)
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <MX_CRC_Init+0x24>)
 8000ea8:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_CRC_Init+0x20>)
 8000eac:	f000 fbcf 	bl	800164e <HAL_CRC_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 8000eb6:	f000 f951 	bl	800115c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000028 	.word	0x20000028
 8000ec4:	40023000 	.word	0x40023000

08000ec8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <MX_USART2_UART_Init+0x50>)
 8000ed0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000f00:	f001 feae 	bl	8002c60 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000f0a:	f000 f927 	bl	800115c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000030 	.word	0x20000030
 8000f18:	40004400 	.word	0x40004400

08000f1c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b34      	ldr	r3, [pc, #208]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a33      	ldr	r2, [pc, #204]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b31      	ldr	r3, [pc, #196]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a25      	ldr	r2, [pc, #148]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	4819      	ldr	r0, [pc, #100]	; (800100c <MX_GPIO_Init+0xf0>)
 8000fa8:	f001 f858 	bl	800205c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fb6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4813      	ldr	r0, [pc, #76]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000fc4:	f000 fe9e 	bl	8001d04 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000fc8:	2320      	movs	r3, #32
 8000fca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480b      	ldr	r0, [pc, #44]	; (800100c <MX_GPIO_Init+0xf0>)
 8000fe0:	f000 fe90 	bl	8001d04 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000ffa:	f000 fe83 	bl	8001d04 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000
 8001010:	40020800 	.word	0x40020800

08001014 <BootLoader_UartReadData>:

/* USER CODE BEGIN 4 */
void BootLoader_UartReadData()
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0c0      	sub	sp, #256	; 0x100
 8001018:	af00      	add	r7, sp, #0
/*This Function is used to Read Command From Host*/
	uint8_t cmdPacket[255]={0};
 800101a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800101e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	3304      	adds	r3, #4
 8001028:	22fb      	movs	r2, #251	; 0xfb
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f002 fa7b 	bl	8003528 <memset>
	while(1)
	{
		/*clear command Packet every iteration*/
		memset(cmdPacket,0,255);
 8001032:	463b      	mov	r3, r7
 8001034:	22ff      	movs	r2, #255	; 0xff
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fa75 	bl	8003528 <memset>
		/*first step read first byte which include length to follow*/
		HAL_UART_Receive(&huart2, cmdPacket, 1, HAL_MAX_DELAY);
 800103e:	4639      	mov	r1, r7
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	2201      	movs	r2, #1
 8001046:	4838      	ldr	r0, [pc, #224]	; (8001128 <BootLoader_UartReadData+0x114>)
 8001048:	f001 fee9 	bl	8002e1e <HAL_UART_Receive>

		/* second step read the rest of command*/
		HAL_UART_Receive(&huart2, &cmdPacket[1],cmdPacket[0], HAL_MAX_DELAY);
 800104c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001050:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b29a      	uxth	r2, r3
 8001058:	463b      	mov	r3, r7
 800105a:	1c59      	adds	r1, r3, #1
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	4831      	ldr	r0, [pc, #196]	; (8001128 <BootLoader_UartReadData+0x114>)
 8001062:	f001 fedc 	bl	8002e1e <HAL_UART_Receive>

		/*check the command code and decode it*/
		switch(cmdPacket[1])
 8001066:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800106a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	3b51      	subs	r3, #81	; 0x51
 8001072:	2b0b      	cmp	r3, #11
 8001074:	d856      	bhi.n	8001124 <BootLoader_UartReadData+0x110>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <BootLoader_UartReadData+0x68>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	080010ad 	.word	0x080010ad
 8001080:	080010b7 	.word	0x080010b7
 8001084:	080010c1 	.word	0x080010c1
 8001088:	080010cb 	.word	0x080010cb
 800108c:	080010d5 	.word	0x080010d5
 8001090:	080010df 	.word	0x080010df
 8001094:	080010e9 	.word	0x080010e9
 8001098:	080010f3 	.word	0x080010f3
 800109c:	080010fd 	.word	0x080010fd
 80010a0:	08001107 	.word	0x08001107
 80010a4:	08001111 	.word	0x08001111
 80010a8:	0800111b 	.word	0x0800111b
		{
			case  BL_GET_VER 			: BL_HandleGetVerCmd(cmdPacket); break;
 80010ac:	463b      	mov	r3, r7
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fb4e 	bl	8000750 <BL_HandleGetVerCmd>
 80010b4:	e037      	b.n	8001126 <BootLoader_UartReadData+0x112>
			case  BL_GET_HELP			: BL_HandleGetHelpCmd(cmdPacket); break;
 80010b6:	463b      	mov	r3, r7
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fb7b 	bl	80007b4 <BL_HandleGetHelpCmd>
 80010be:	e032      	b.n	8001126 <BootLoader_UartReadData+0x112>
			case  BL_GET_CID			: BL_HandleGetCIDCmd(cmdPacket); break;
 80010c0:	463b      	mov	r3, r7
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fbae 	bl	8000824 <BL_HandleGetCIDCmd>
 80010c8:	e02d      	b.n	8001126 <BootLoader_UartReadData+0x112>
			case  BL_GET_RDP_STATUS		: BL_HandleGetRdpStatusCmd(cmdPacket) ; break;
 80010ca:	463b      	mov	r3, r7
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fbe1 	bl	8000894 <BL_HandleGetRdpStatusCmd>
 80010d2:	e028      	b.n	8001126 <BootLoader_UartReadData+0x112>
			case  BL_GOTO_ADDR			: BL_HandleGoToAddressCmd(cmdPacket); break;
 80010d4:	463b      	mov	r3, r7
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fc18 	bl	800090c <BL_HandleGoToAddressCmd>
 80010dc:	e023      	b.n	8001126 <BootLoader_UartReadData+0x112>
			case  BL_FLASH_ERASE		: BL_HandleFlashEraseCmd(cmdPacket); break;
 80010de:	463b      	mov	r3, r7
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fc57 	bl	8000994 <BL_HandleFlashEraseCmd>
 80010e6:	e01e      	b.n	8001126 <BootLoader_UartReadData+0x112>
			case  BL_MEM_WRITE			: BL_HandleMemWriteCmd(cmdPacket); break;
 80010e8:	463b      	mov	r3, r7
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fc8e 	bl	8000a0c <BL_HandleMemWriteCmd>
 80010f0:	e019      	b.n	8001126 <BootLoader_UartReadData+0x112>
			case  BL_EN_WR_PROTECT		: BL_HandleEnRwProtectionCmd(cmdPacket); break;
 80010f2:	463b      	mov	r3, r7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fd19 	bl	8000b2c <BL_HandleEnRwProtectionCmd>
 80010fa:	e014      	b.n	8001126 <BootLoader_UartReadData+0x112>
			case  BL_MEM_READ			: BL_HandleMemReadCmd(cmdPacket);break;
 80010fc:	463b      	mov	r3, r7
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fcce 	bl	8000aa0 <BL_HandleMemReadCmd>
 8001104:	e00f      	b.n	8001126 <BootLoader_UartReadData+0x112>
			case  BL_READ_SECTOR_STATUS : BL_HandleReadSectorStatusCmd(cmdPacket); break;
 8001106:	463b      	mov	r3, r7
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fd71 	bl	8000bf0 <BL_HandleReadSectorStatusCmd>
 800110e:	e00a      	b.n	8001126 <BootLoader_UartReadData+0x112>
			case  BL_OTP_READ		    :BL_HandleOtpReadCmd(cmdPacket); break;
 8001110:	463b      	mov	r3, r7
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fda2 	bl	8000c5c <BL_HandleOtpReadCmd>
 8001118:	e005      	b.n	8001126 <BootLoader_UartReadData+0x112>
			case  BL_DIS_WR_PROTECT   	:BL_HandleDisRwProtectionCmd(cmdPacket); break;
 800111a:	463b      	mov	r3, r7
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fdc3 	bl	8000ca8 <BL_HandleDisRwProtectionCmd>
 8001122:	e000      	b.n	8001126 <BootLoader_UartReadData+0x112>
			default: break;
 8001124:	bf00      	nop
		memset(cmdPacket,0,255);
 8001126:	e784      	b.n	8001032 <BootLoader_UartReadData+0x1e>
 8001128:	20000030 	.word	0x20000030

0800112c <BootLoader_JumpToApp>:
		}

	}
}
void BootLoader_JumpToApp()
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
	/*configure msp by reading value of base address of vector table*/
	uint32_t msp_value=*((volatile uint32_t*)FLASH_BASE_SECTOR2_ADDRESS);
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <BootLoader_JumpToApp+0x28>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	60fb      	str	r3, [r7, #12]

	uint32_t resetHandlerAddress =*((volatile uint32_t*)FLASH_BASE_SECTOR2_ADDRESS+1);
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <BootLoader_JumpToApp+0x2c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60bb      	str	r3, [r7, #8]

	__asm volatile ("MSR MSP, %0"::"r"(msp_value));
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f383 8808 	msr	MSP, r3

	void (*APP_Reset_Handler)(void);

	APP_Reset_Handler =(void*)resetHandlerAddress;
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	607b      	str	r3, [r7, #4]
	/*jump to user app*/
	APP_Reset_Handler();
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4798      	blx	r3
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	08008000 	.word	0x08008000
 8001158:	08008004 	.word	0x08008004

0800115c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001164:	e7fe      	b.n	8001164 <Error_Handler+0x8>
	...

08001168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <HAL_MspInit+0x4c>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_MspInit+0x4c>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011a6:	2007      	movs	r0, #7
 80011a8:	f000 fa1e 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800

080011b8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_CRC_MspInit+0x3c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d10d      	bne.n	80011e6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_CRC_MspInit+0x40>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <HAL_CRC_MspInit+0x40>)
 80011d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <HAL_CRC_MspInit+0x40>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023000 	.word	0x40023000
 80011f8:	40023800 	.word	0x40023800

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a19      	ldr	r2, [pc, #100]	; (8001280 <HAL_UART_MspInit+0x84>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d12b      	bne.n	8001276 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_UART_MspInit+0x88>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_UART_MspInit+0x88>)
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_UART_MspInit+0x88>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_UART_MspInit+0x88>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <HAL_UART_MspInit+0x88>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_UART_MspInit+0x88>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001256:	230c      	movs	r3, #12
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001266:	2307      	movs	r3, #7
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_UART_MspInit+0x8c>)
 8001272:	f000 fd47 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40004400 	.word	0x40004400
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000

0800128c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <NMI_Handler+0x4>

08001292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <MemManage_Handler+0x4>

0800129e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <BusFault_Handler+0x4>

080012a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <UsageFault_Handler+0x4>

080012aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d8:	f000 f890 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <SystemInit+0x20>)
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <SystemInit+0x20>)
 80012ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800133c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800130a:	490e      	ldr	r1, [pc, #56]	; (8001344 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001320:	4c0b      	ldr	r4, [pc, #44]	; (8001350 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800132e:	f7ff ffd7 	bl	80012e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001332:	f002 f901 	bl	8003538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001336:	f7ff fd11 	bl	8000d5c <main>
  bx  lr    
 800133a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800133c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001344:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001348:	080035e8 	.word	0x080035e8
  ldr r2, =_sbss
 800134c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001350:	20000098 	.word	0x20000098

08001354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC_IRQHandler>
	...

08001358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <HAL_Init+0x40>)
 8001362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_Init+0x40>)
 800136e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_Init+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_Init+0x40>)
 800137a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f000 f931 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f808 	bl	800139c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800138c:	f7ff feec 	bl	8001168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023c00 	.word	0x40023c00

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x54>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x58>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f93b 	bl	8001636 <HAL_SYSTICK_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00e      	b.n	80013e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d80a      	bhi.n	80013e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f000 f911 	bl	80015fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <HAL_InitTick+0x5c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x20>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x24>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_IncTick+0x24>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000008 	.word	0x20000008
 8001420:	20000074 	.word	0x20000074

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000074 	.word	0x20000074

0800143c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff ffee 	bl	8001424 <HAL_GetTick>
 8001448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d005      	beq.n	8001462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_Delay+0x44>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001462:	bf00      	nop
 8001464:	f7ff ffde 	bl	8001424 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f7      	bhi.n	8001464 <HAL_Delay+0x28>
  {
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	db0a      	blt.n	8001512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	490c      	ldr	r1, [pc, #48]	; (8001534 <__NVIC_SetPriority+0x4c>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	440b      	add	r3, r1
 800150c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001510:	e00a      	b.n	8001528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4908      	ldr	r1, [pc, #32]	; (8001538 <__NVIC_SetPriority+0x50>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	440b      	add	r3, r1
 8001526:	761a      	strb	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f1c3 0307 	rsb	r3, r3, #7
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf28      	it	cs
 800155a:	2304      	movcs	r3, #4
 800155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	2b06      	cmp	r3, #6
 8001564:	d902      	bls.n	800156c <NVIC_EncodePriority+0x30>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3b03      	subs	r3, #3
 800156a:	e000      	b.n	800156e <NVIC_EncodePriority+0x32>
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	4313      	orrs	r3, r2
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f7ff ff8e 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff47 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001610:	f7ff ff5c 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff8e 	bl	800153c <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5d 	bl	80014e8 <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffb0 	bl	80015a4 <SysTick_Config>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e00e      	b.n	800167e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	795b      	ldrb	r3, [r3, #5]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d105      	bne.n	8001676 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fda1 	bl	80011b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001686:	b480      	push	{r7}
 8001688:	b087      	sub	sp, #28
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2202      	movs	r2, #2
 800169a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e00a      	b.n	80016b8 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	441a      	add	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d3f0      	bcc.n	80016a2 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2201      	movs	r2, #1
 80016cc:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80016ce:	693b      	ldr	r3, [r7, #16]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <HAL_FLASH_Program+0xa0>)
 80016f0:	7e1b      	ldrb	r3, [r3, #24]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_FLASH_Program+0x1e>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e03b      	b.n	8001772 <HAL_FLASH_Program+0x96>
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_FLASH_Program+0xa0>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001700:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001704:	f000 f89c 	bl	8001840 <FLASH_WaitForLastOperation>
 8001708:	4603      	mov	r3, r0
 800170a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d12b      	bne.n	800176a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001718:	783b      	ldrb	r3, [r7, #0]
 800171a:	4619      	mov	r1, r3
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	f000 f947 	bl	80019b0 <FLASH_Program_Byte>
 8001722:	e016      	b.n	8001752 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d105      	bne.n	8001736 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800172a:	883b      	ldrh	r3, [r7, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	68b8      	ldr	r0, [r7, #8]
 8001730:	f000 f91a 	bl	8001968 <FLASH_Program_HalfWord>
 8001734:	e00d      	b.n	8001752 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d105      	bne.n	8001748 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4619      	mov	r1, r3
 8001740:	68b8      	ldr	r0, [r7, #8]
 8001742:	f000 f8ef 	bl	8001924 <FLASH_Program_Word>
 8001746:	e004      	b.n	8001752 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800174c:	68b8      	ldr	r0, [r7, #8]
 800174e:	f000 f8b7 	bl	80018c0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001752:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001756:	f000 f873 	bl	8001840 <FLASH_WaitForLastOperation>
 800175a:	4603      	mov	r3, r0
 800175c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_FLASH_Program+0xa4>)
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_FLASH_Program+0xa4>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <HAL_FLASH_Program+0xa0>)
 800176c:	2200      	movs	r2, #0
 800176e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001770:	7dfb      	ldrb	r3, [r7, #23]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000078 	.word	0x20000078
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_FLASH_Unlock+0x38>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b00      	cmp	r3, #0
 8001794:	da0b      	bge.n	80017ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_FLASH_Unlock+0x38>)
 8001798:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <HAL_FLASH_Unlock+0x3c>)
 800179a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_FLASH_Unlock+0x38>)
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <HAL_FLASH_Unlock+0x40>)
 80017a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_FLASH_Unlock+0x38>)
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da01      	bge.n	80017ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80017ae:	79fb      	ldrb	r3, [r7, #7]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40023c00 	.word	0x40023c00
 80017c0:	45670123 	.word	0x45670123
 80017c4:	cdef89ab 	.word	0xcdef89ab

080017c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_FLASH_Lock+0x1c>)
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_FLASH_Lock+0x1c>)
 80017d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40023c00 	.word	0x40023c00

080017e8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_FLASH_OB_Unlock+0x2c>)
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d007      	beq.n	8001808 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_FLASH_OB_Unlock+0x2c>)
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_FLASH_OB_Unlock+0x30>)
 80017fc:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_FLASH_OB_Unlock+0x2c>)
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_FLASH_OB_Unlock+0x34>)
 8001802:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001804:	2300      	movs	r3, #0
 8001806:	e000      	b.n	800180a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40023c00 	.word	0x40023c00
 8001818:	08192a3b 	.word	0x08192a3b
 800181c:	4c5d6e7f 	.word	0x4c5d6e7f

08001820 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_FLASH_OB_Lock+0x1c>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_FLASH_OB_Lock+0x1c>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40023c00 	.word	0x40023c00

08001840 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <FLASH_WaitForLastOperation+0x78>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001852:	f7ff fde7 	bl	8001424 <HAL_GetTick>
 8001856:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001858:	e010      	b.n	800187c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d00c      	beq.n	800187c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <FLASH_WaitForLastOperation+0x38>
 8001868:	f7ff fddc 	bl	8001424 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	d201      	bcs.n	800187c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e019      	b.n	80018b0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <FLASH_WaitForLastOperation+0x7c>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1e8      	bne.n	800185a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <FLASH_WaitForLastOperation+0x7c>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <FLASH_WaitForLastOperation+0x7c>)
 8001896:	2201      	movs	r2, #1
 8001898:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <FLASH_WaitForLastOperation+0x7c>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80018a6:	f000 f8a5 	bl	80019f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
  
}  
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000078 	.word	0x20000078
 80018bc:	40023c00 	.word	0x40023c00

080018c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <FLASH_Program_DoubleWord+0x60>)
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	4a13      	ldr	r2, [pc, #76]	; (8001920 <FLASH_Program_DoubleWord+0x60>)
 80018d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <FLASH_Program_DoubleWord+0x60>)
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	4a10      	ldr	r2, [pc, #64]	; (8001920 <FLASH_Program_DoubleWord+0x60>)
 80018de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80018e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <FLASH_Program_DoubleWord+0x60>)
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <FLASH_Program_DoubleWord+0x60>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80018f6:	f3bf 8f6f 	isb	sy
}
 80018fa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80018fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	000a      	movs	r2, r1
 800190a:	2300      	movs	r3, #0
 800190c:	68f9      	ldr	r1, [r7, #12]
 800190e:	3104      	adds	r1, #4
 8001910:	4613      	mov	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40023c00 	.word	0x40023c00

08001924 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <FLASH_Program_Word+0x40>)
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <FLASH_Program_Word+0x40>)
 8001934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001938:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <FLASH_Program_Word+0x40>)
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <FLASH_Program_Word+0x40>)
 8001940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001944:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <FLASH_Program_Word+0x40>)
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	4a06      	ldr	r2, [pc, #24]	; (8001964 <FLASH_Program_Word+0x40>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	601a      	str	r2, [r3, #0]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40023c00 	.word	0x40023c00

08001968 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <FLASH_Program_HalfWord+0x44>)
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <FLASH_Program_HalfWord+0x44>)
 800197a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800197e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <FLASH_Program_HalfWord+0x44>)
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	4a09      	ldr	r2, [pc, #36]	; (80019ac <FLASH_Program_HalfWord+0x44>)
 8001986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <FLASH_Program_HalfWord+0x44>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	4a06      	ldr	r2, [pc, #24]	; (80019ac <FLASH_Program_HalfWord+0x44>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	801a      	strh	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <FLASH_Program_Byte+0x40>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <FLASH_Program_Byte+0x40>)
 80019c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <FLASH_Program_Byte+0x40>)
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <FLASH_Program_Byte+0x40>)
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <FLASH_Program_Byte+0x40>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <FLASH_Program_Byte+0x40>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	701a      	strb	r2, [r3, #0]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023c00 	.word	0x40023c00

080019f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80019f8:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <FLASH_SetErrorCode+0xc4>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <FLASH_SetErrorCode+0xc8>)
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	f043 0310 	orr.w	r3, r3, #16
 8001a0c:	4a2b      	ldr	r2, [pc, #172]	; (8001abc <FLASH_SetErrorCode+0xc8>)
 8001a0e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001a10:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <FLASH_SetErrorCode+0xc4>)
 8001a12:	2210      	movs	r2, #16
 8001a14:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001a16:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <FLASH_SetErrorCode+0xc4>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <FLASH_SetErrorCode+0xc8>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f043 0308 	orr.w	r3, r3, #8
 8001a2a:	4a24      	ldr	r2, [pc, #144]	; (8001abc <FLASH_SetErrorCode+0xc8>)
 8001a2c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001a2e:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <FLASH_SetErrorCode+0xc4>)
 8001a30:	2220      	movs	r2, #32
 8001a32:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <FLASH_SetErrorCode+0xc4>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <FLASH_SetErrorCode+0xc8>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <FLASH_SetErrorCode+0xc8>)
 8001a4a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <FLASH_SetErrorCode+0xc4>)
 8001a4e:	2240      	movs	r2, #64	; 0x40
 8001a50:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <FLASH_SetErrorCode+0xc4>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d008      	beq.n	8001a70 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <FLASH_SetErrorCode+0xc8>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <FLASH_SetErrorCode+0xc8>)
 8001a68:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <FLASH_SetErrorCode+0xc4>)
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <FLASH_SetErrorCode+0xc4>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d009      	beq.n	8001a90 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <FLASH_SetErrorCode+0xc8>)
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <FLASH_SetErrorCode+0xc8>)
 8001a86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <FLASH_SetErrorCode+0xc4>)
 8001a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <FLASH_SetErrorCode+0xc4>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <FLASH_SetErrorCode+0xc8>)
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	f043 0320 	orr.w	r3, r3, #32
 8001aa4:	4a05      	ldr	r2, [pc, #20]	; (8001abc <FLASH_SetErrorCode+0xc8>)
 8001aa6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <FLASH_SetErrorCode+0xc4>)
 8001aaa:	2202      	movs	r2, #2
 8001aac:	60da      	str	r2, [r3, #12]
  }
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40023c00 	.word	0x40023c00
 8001abc:	20000078 	.word	0x20000078

08001ac0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ad2:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_FLASHEx_Erase+0xd8>)
 8001ad4:	7e1b      	ldrb	r3, [r3, #24]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_FLASHEx_Erase+0x1e>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e058      	b.n	8001b90 <HAL_FLASHEx_Erase+0xd0>
 8001ade:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <HAL_FLASHEx_Erase+0xd8>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ae4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ae8:	f7ff feaa 	bl	8001840 <FLASH_WaitForLastOperation>
 8001aec:	4603      	mov	r3, r0
 8001aee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d148      	bne.n	8001b88 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d115      	bne.n	8001b32 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f000 f844 	bl	8001ba0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b1c:	f7ff fe90 	bl	8001840 <FLASH_WaitForLastOperation>
 8001b20:	4603      	mov	r3, r0
 8001b22:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_FLASHEx_Erase+0xdc>)
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <HAL_FLASHEx_Erase+0xdc>)
 8001b2a:	f023 0304 	bic.w	r3, r3, #4
 8001b2e:	6113      	str	r3, [r2, #16]
 8001b30:	e028      	b.n	8001b84 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	e01c      	b.n	8001b74 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4619      	mov	r1, r3
 8001b42:	68b8      	ldr	r0, [r7, #8]
 8001b44:	f000 f850 	bl	8001be8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b4c:	f7ff fe78 	bl	8001840 <FLASH_WaitForLastOperation>
 8001b50:	4603      	mov	r3, r0
 8001b52:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_FLASHEx_Erase+0xdc>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <HAL_FLASHEx_Erase+0xdc>)
 8001b5a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001b5e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	601a      	str	r2, [r3, #0]
          break;
 8001b6c:	e00a      	b.n	8001b84 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3301      	adds	r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d3da      	bcc.n	8001b3a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001b84:	f000 f878 	bl	8001c78 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_FLASHEx_Erase+0xd8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	761a      	strb	r2, [r3, #24]

  return status;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000078 	.word	0x20000078
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <FLASH_MassErase+0x44>)
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <FLASH_MassErase+0x44>)
 8001bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <FLASH_MassErase+0x44>)
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <FLASH_MassErase+0x44>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <FLASH_MassErase+0x44>)
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <FLASH_MassErase+0x44>)
 8001bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd4:	6113      	str	r3, [r2, #16]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e010      	b.n	8001c26 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d103      	bne.n	8001c12 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e009      	b.n	8001c26 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d103      	bne.n	8001c20 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e002      	b.n	8001c26 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001c20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <FLASH_Erase_Sector+0x8c>)
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <FLASH_Erase_Sector+0x8c>)
 8001c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <FLASH_Erase_Sector+0x8c>)
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	490f      	ldr	r1, [pc, #60]	; (8001c74 <FLASH_Erase_Sector+0x8c>)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <FLASH_Erase_Sector+0x8c>)
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <FLASH_Erase_Sector+0x8c>)
 8001c44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <FLASH_Erase_Sector+0x8c>)
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4313      	orrs	r3, r2
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <FLASH_Erase_Sector+0x8c>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <FLASH_Erase_Sector+0x8c>)
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <FLASH_Erase_Sector+0x8c>)
 8001c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c66:	6113      	str	r3, [r2, #16]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d017      	beq.n	8001cb8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001c8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c92:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001c9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001ca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001caa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d017      	beq.n	8001cf4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001cca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001cd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ce6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <FLASH_FlushCaches+0x88>)
 8001cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf2:	6013      	str	r3, [r2, #0]
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40023c00 	.word	0x40023c00

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	e165      	b.n	8001fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	f040 8154 	bne.w	8001fe6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d005      	beq.n	8001d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d130      	bne.n	8001db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 0201 	and.w	r2, r3, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d017      	beq.n	8001df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d123      	bne.n	8001e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	69b9      	ldr	r1, [r7, #24]
 8001e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0203 	and.w	r2, r3, #3
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80ae 	beq.w	8001fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_GPIO_Init+0x300>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	4a5c      	ldr	r2, [pc, #368]	; (8002004 <HAL_GPIO_Init+0x300>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9a:	4b5a      	ldr	r3, [pc, #360]	; (8002004 <HAL_GPIO_Init+0x300>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea6:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_GPIO_Init+0x304>)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4f      	ldr	r2, [pc, #316]	; (800200c <HAL_GPIO_Init+0x308>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d025      	beq.n	8001f1e <HAL_GPIO_Init+0x21a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4e      	ldr	r2, [pc, #312]	; (8002010 <HAL_GPIO_Init+0x30c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x216>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4d      	ldr	r2, [pc, #308]	; (8002014 <HAL_GPIO_Init+0x310>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x212>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4c      	ldr	r2, [pc, #304]	; (8002018 <HAL_GPIO_Init+0x314>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x20e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4b      	ldr	r2, [pc, #300]	; (800201c <HAL_GPIO_Init+0x318>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x20a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4a      	ldr	r2, [pc, #296]	; (8002020 <HAL_GPIO_Init+0x31c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x206>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a49      	ldr	r2, [pc, #292]	; (8002024 <HAL_GPIO_Init+0x320>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x202>
 8001f02:	2306      	movs	r3, #6
 8001f04:	e00c      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f06:	2307      	movs	r3, #7
 8001f08:	e00a      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	e008      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e004      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e002      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f002 0203 	and.w	r2, r2, #3
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	4093      	lsls	r3, r2
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f30:	4935      	ldr	r1, [pc, #212]	; (8002008 <HAL_GPIO_Init+0x304>)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f62:	4a31      	ldr	r2, [pc, #196]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f68:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f8c:	4a26      	ldr	r2, [pc, #152]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f92:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe0:	4a11      	ldr	r2, [pc, #68]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	f67f ae96 	bls.w	8001d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40013800 	.word	0x40013800
 800200c:	40020000 	.word	0x40020000
 8002010:	40020400 	.word	0x40020400
 8002014:	40020800 	.word	0x40020800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	40021000 	.word	0x40021000
 8002020:	40021400 	.word	0x40021400
 8002024:	40021800 	.word	0x40021800
 8002028:	40013c00 	.word	0x40013c00

0800202c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e001      	b.n	800204e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
 8002068:	4613      	mov	r3, r2
 800206a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800206c:	787b      	ldrb	r3, [r7, #1]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002078:	e003      	b.n	8002082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800207a:	887b      	ldrh	r3, [r7, #2]
 800207c:	041a      	lsls	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	619a      	str	r2, [r3, #24]
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0cc      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a4:	4b68      	ldr	r3, [pc, #416]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d90c      	bls.n	80020cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b65      	ldr	r3, [pc, #404]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0b8      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d020      	beq.n	800211a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e4:	4b59      	ldr	r3, [pc, #356]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a58      	ldr	r2, [pc, #352]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020fc:	4b53      	ldr	r3, [pc, #332]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a52      	ldr	r2, [pc, #328]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	494d      	ldr	r1, [pc, #308]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d044      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d119      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e07f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d003      	beq.n	800214e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800214a:	2b03      	cmp	r3, #3
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214e:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e06f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215e:	4b3b      	ldr	r3, [pc, #236]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e067      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216e:	4b37      	ldr	r3, [pc, #220]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f023 0203 	bic.w	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4934      	ldr	r1, [pc, #208]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002180:	f7ff f950 	bl	8001424 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	e00a      	b.n	800219e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f7ff f94c 	bl	8001424 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e04f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 020c 	and.w	r2, r3, #12
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1eb      	bne.n	8002188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d20c      	bcs.n	80021d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e032      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4916      	ldr	r1, [pc, #88]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	490e      	ldr	r1, [pc, #56]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002216:	f000 f855 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 800221a:	4602      	mov	r2, r0
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	490a      	ldr	r1, [pc, #40]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	5ccb      	ldrb	r3, [r1, r3]
 800222a:	fa22 f303 	lsr.w	r3, r2, r3
 800222e:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff f8b0 	bl	800139c <HAL_InitTick>

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023c00 	.word	0x40023c00
 800224c:	40023800 	.word	0x40023800
 8002250:	080035c0 	.word	0x080035c0
 8002254:	20000000 	.word	0x20000000
 8002258:	20000004 	.word	0x20000004

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_RCC_GetHCLKFreq+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000000 	.word	0x20000000

08002274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002278:	f7ff fff0 	bl	800225c <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0a9b      	lsrs	r3, r3, #10
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4903      	ldr	r1, [pc, #12]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	080035d0 	.word	0x080035d0

0800229c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022a0:	f7ff ffdc 	bl	800225c <HAL_RCC_GetHCLKFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	0b5b      	lsrs	r3, r3, #13
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	4903      	ldr	r1, [pc, #12]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40023800 	.word	0x40023800
 80022c0:	080035d0 	.word	0x080035d0

080022c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c8:	b0ae      	sub	sp, #184	; 0xb8
 80022ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ea:	4bcb      	ldr	r3, [pc, #812]	; (8002618 <HAL_RCC_GetSysClockFreq+0x354>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	f200 8206 	bhi.w	8002704 <HAL_RCC_GetSysClockFreq+0x440>
 80022f8:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fe:	bf00      	nop
 8002300:	08002335 	.word	0x08002335
 8002304:	08002705 	.word	0x08002705
 8002308:	08002705 	.word	0x08002705
 800230c:	08002705 	.word	0x08002705
 8002310:	0800233d 	.word	0x0800233d
 8002314:	08002705 	.word	0x08002705
 8002318:	08002705 	.word	0x08002705
 800231c:	08002705 	.word	0x08002705
 8002320:	08002345 	.word	0x08002345
 8002324:	08002705 	.word	0x08002705
 8002328:	08002705 	.word	0x08002705
 800232c:	08002705 	.word	0x08002705
 8002330:	08002535 	.word	0x08002535
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002334:	4bb9      	ldr	r3, [pc, #740]	; (800261c <HAL_RCC_GetSysClockFreq+0x358>)
 8002336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800233a:	e1e7      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233c:	4bb8      	ldr	r3, [pc, #736]	; (8002620 <HAL_RCC_GetSysClockFreq+0x35c>)
 800233e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002342:	e1e3      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002344:	4bb4      	ldr	r3, [pc, #720]	; (8002618 <HAL_RCC_GetSysClockFreq+0x354>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800234c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002350:	4bb1      	ldr	r3, [pc, #708]	; (8002618 <HAL_RCC_GetSysClockFreq+0x354>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d071      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235c:	4bae      	ldr	r3, [pc, #696]	; (8002618 <HAL_RCC_GetSysClockFreq+0x354>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	2200      	movs	r2, #0
 8002364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002368:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800236c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002374:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800237e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002382:	4622      	mov	r2, r4
 8002384:	462b      	mov	r3, r5
 8002386:	f04f 0000 	mov.w	r0, #0
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	0159      	lsls	r1, r3, #5
 8002390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002394:	0150      	lsls	r0, r2, #5
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4621      	mov	r1, r4
 800239c:	1a51      	subs	r1, r2, r1
 800239e:	6439      	str	r1, [r7, #64]	; 0x40
 80023a0:	4629      	mov	r1, r5
 80023a2:	eb63 0301 	sbc.w	r3, r3, r1
 80023a6:	647b      	str	r3, [r7, #68]	; 0x44
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80023b4:	4649      	mov	r1, r9
 80023b6:	018b      	lsls	r3, r1, #6
 80023b8:	4641      	mov	r1, r8
 80023ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023be:	4641      	mov	r1, r8
 80023c0:	018a      	lsls	r2, r1, #6
 80023c2:	4641      	mov	r1, r8
 80023c4:	1a51      	subs	r1, r2, r1
 80023c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80023c8:	4649      	mov	r1, r9
 80023ca:	eb63 0301 	sbc.w	r3, r3, r1
 80023ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80023dc:	4649      	mov	r1, r9
 80023de:	00cb      	lsls	r3, r1, #3
 80023e0:	4641      	mov	r1, r8
 80023e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023e6:	4641      	mov	r1, r8
 80023e8:	00ca      	lsls	r2, r1, #3
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	4622      	mov	r2, r4
 80023f2:	189b      	adds	r3, r3, r2
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
 80023f6:	462b      	mov	r3, r5
 80023f8:	460a      	mov	r2, r1
 80023fa:	eb42 0303 	adc.w	r3, r2, r3
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800240c:	4629      	mov	r1, r5
 800240e:	024b      	lsls	r3, r1, #9
 8002410:	4621      	mov	r1, r4
 8002412:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002416:	4621      	mov	r1, r4
 8002418:	024a      	lsls	r2, r1, #9
 800241a:	4610      	mov	r0, r2
 800241c:	4619      	mov	r1, r3
 800241e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002422:	2200      	movs	r2, #0
 8002424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002428:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800242c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002430:	f7fd fee8 	bl	8000204 <__aeabi_uldivmod>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4613      	mov	r3, r2
 800243a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800243e:	e067      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002440:	4b75      	ldr	r3, [pc, #468]	; (8002618 <HAL_RCC_GetSysClockFreq+0x354>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	099b      	lsrs	r3, r3, #6
 8002446:	2200      	movs	r2, #0
 8002448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800244c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002450:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002458:	67bb      	str	r3, [r7, #120]	; 0x78
 800245a:	2300      	movs	r3, #0
 800245c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800245e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002462:	4622      	mov	r2, r4
 8002464:	462b      	mov	r3, r5
 8002466:	f04f 0000 	mov.w	r0, #0
 800246a:	f04f 0100 	mov.w	r1, #0
 800246e:	0159      	lsls	r1, r3, #5
 8002470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002474:	0150      	lsls	r0, r2, #5
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4621      	mov	r1, r4
 800247c:	1a51      	subs	r1, r2, r1
 800247e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002480:	4629      	mov	r1, r5
 8002482:	eb63 0301 	sbc.w	r3, r3, r1
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002494:	4649      	mov	r1, r9
 8002496:	018b      	lsls	r3, r1, #6
 8002498:	4641      	mov	r1, r8
 800249a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800249e:	4641      	mov	r1, r8
 80024a0:	018a      	lsls	r2, r1, #6
 80024a2:	4641      	mov	r1, r8
 80024a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80024a8:	4649      	mov	r1, r9
 80024aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c2:	4692      	mov	sl, r2
 80024c4:	469b      	mov	fp, r3
 80024c6:	4623      	mov	r3, r4
 80024c8:	eb1a 0303 	adds.w	r3, sl, r3
 80024cc:	623b      	str	r3, [r7, #32]
 80024ce:	462b      	mov	r3, r5
 80024d0:	eb4b 0303 	adc.w	r3, fp, r3
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024e2:	4629      	mov	r1, r5
 80024e4:	028b      	lsls	r3, r1, #10
 80024e6:	4621      	mov	r1, r4
 80024e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024ec:	4621      	mov	r1, r4
 80024ee:	028a      	lsls	r2, r1, #10
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024f8:	2200      	movs	r2, #0
 80024fa:	673b      	str	r3, [r7, #112]	; 0x70
 80024fc:	677a      	str	r2, [r7, #116]	; 0x74
 80024fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002502:	f7fd fe7f 	bl	8000204 <__aeabi_uldivmod>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4613      	mov	r3, r2
 800250c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002510:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_GetSysClockFreq+0x354>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	3301      	adds	r3, #1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002532:	e0eb      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002534:	4b38      	ldr	r3, [pc, #224]	; (8002618 <HAL_RCC_GetSysClockFreq+0x354>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800253c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002540:	4b35      	ldr	r3, [pc, #212]	; (8002618 <HAL_RCC_GetSysClockFreq+0x354>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d06b      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254c:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_RCC_GetSysClockFreq+0x354>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	2200      	movs	r2, #0
 8002554:	66bb      	str	r3, [r7, #104]	; 0x68
 8002556:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800255a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255e:	663b      	str	r3, [r7, #96]	; 0x60
 8002560:	2300      	movs	r3, #0
 8002562:	667b      	str	r3, [r7, #100]	; 0x64
 8002564:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002568:	4622      	mov	r2, r4
 800256a:	462b      	mov	r3, r5
 800256c:	f04f 0000 	mov.w	r0, #0
 8002570:	f04f 0100 	mov.w	r1, #0
 8002574:	0159      	lsls	r1, r3, #5
 8002576:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800257a:	0150      	lsls	r0, r2, #5
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4621      	mov	r1, r4
 8002582:	1a51      	subs	r1, r2, r1
 8002584:	61b9      	str	r1, [r7, #24]
 8002586:	4629      	mov	r1, r5
 8002588:	eb63 0301 	sbc.w	r3, r3, r1
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800259a:	4659      	mov	r1, fp
 800259c:	018b      	lsls	r3, r1, #6
 800259e:	4651      	mov	r1, sl
 80025a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025a4:	4651      	mov	r1, sl
 80025a6:	018a      	lsls	r2, r1, #6
 80025a8:	4651      	mov	r1, sl
 80025aa:	ebb2 0801 	subs.w	r8, r2, r1
 80025ae:	4659      	mov	r1, fp
 80025b0:	eb63 0901 	sbc.w	r9, r3, r1
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025c8:	4690      	mov	r8, r2
 80025ca:	4699      	mov	r9, r3
 80025cc:	4623      	mov	r3, r4
 80025ce:	eb18 0303 	adds.w	r3, r8, r3
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	462b      	mov	r3, r5
 80025d6:	eb49 0303 	adc.w	r3, r9, r3
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025e8:	4629      	mov	r1, r5
 80025ea:	024b      	lsls	r3, r1, #9
 80025ec:	4621      	mov	r1, r4
 80025ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025f2:	4621      	mov	r1, r4
 80025f4:	024a      	lsls	r2, r1, #9
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025fe:	2200      	movs	r2, #0
 8002600:	65bb      	str	r3, [r7, #88]	; 0x58
 8002602:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002604:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002608:	f7fd fdfc 	bl	8000204 <__aeabi_uldivmod>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4613      	mov	r3, r2
 8002612:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002616:	e065      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x420>
 8002618:	40023800 	.word	0x40023800
 800261c:	00f42400 	.word	0x00f42400
 8002620:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002624:	4b3d      	ldr	r3, [pc, #244]	; (800271c <HAL_RCC_GetSysClockFreq+0x458>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	2200      	movs	r2, #0
 800262c:	4618      	mov	r0, r3
 800262e:	4611      	mov	r1, r2
 8002630:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002634:	653b      	str	r3, [r7, #80]	; 0x50
 8002636:	2300      	movs	r3, #0
 8002638:	657b      	str	r3, [r7, #84]	; 0x54
 800263a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800263e:	4642      	mov	r2, r8
 8002640:	464b      	mov	r3, r9
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f04f 0100 	mov.w	r1, #0
 800264a:	0159      	lsls	r1, r3, #5
 800264c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002650:	0150      	lsls	r0, r2, #5
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4641      	mov	r1, r8
 8002658:	1a51      	subs	r1, r2, r1
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	4649      	mov	r1, r9
 800265e:	eb63 0301 	sbc.w	r3, r3, r1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002670:	4659      	mov	r1, fp
 8002672:	018b      	lsls	r3, r1, #6
 8002674:	4651      	mov	r1, sl
 8002676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800267a:	4651      	mov	r1, sl
 800267c:	018a      	lsls	r2, r1, #6
 800267e:	4651      	mov	r1, sl
 8002680:	1a54      	subs	r4, r2, r1
 8002682:	4659      	mov	r1, fp
 8002684:	eb63 0501 	sbc.w	r5, r3, r1
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	00eb      	lsls	r3, r5, #3
 8002692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002696:	00e2      	lsls	r2, r4, #3
 8002698:	4614      	mov	r4, r2
 800269a:	461d      	mov	r5, r3
 800269c:	4643      	mov	r3, r8
 800269e:	18e3      	adds	r3, r4, r3
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	464b      	mov	r3, r9
 80026a4:	eb45 0303 	adc.w	r3, r5, r3
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026b6:	4629      	mov	r1, r5
 80026b8:	028b      	lsls	r3, r1, #10
 80026ba:	4621      	mov	r1, r4
 80026bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c0:	4621      	mov	r1, r4
 80026c2:	028a      	lsls	r2, r1, #10
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026cc:	2200      	movs	r2, #0
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80026d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026d6:	f7fd fd95 	bl	8000204 <__aeabi_uldivmod>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4613      	mov	r3, r2
 80026e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026e4:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_RCC_GetSysClockFreq+0x458>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	0f1b      	lsrs	r3, r3, #28
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80026f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002702:	e003      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800270a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002710:	4618      	mov	r0, r3
 8002712:	37b8      	adds	r7, #184	; 0xb8
 8002714:	46bd      	mov	sp, r7
 8002716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	00f42400 	.word	0x00f42400

08002724 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e28d      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8083 	beq.w	800284a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002744:	4b94      	ldr	r3, [pc, #592]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b04      	cmp	r3, #4
 800274e:	d019      	beq.n	8002784 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002750:	4b91      	ldr	r3, [pc, #580]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002758:	2b08      	cmp	r3, #8
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800275c:	4b8e      	ldr	r3, [pc, #568]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002768:	d00c      	beq.n	8002784 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d112      	bne.n	800279c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002782:	d10b      	bne.n	800279c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	4b84      	ldr	r3, [pc, #528]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d05b      	beq.n	8002848 <HAL_RCC_OscConfig+0x124>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d157      	bne.n	8002848 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e25a      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a4:	d106      	bne.n	80027b4 <HAL_RCC_OscConfig+0x90>
 80027a6:	4b7c      	ldr	r3, [pc, #496]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a7b      	ldr	r2, [pc, #492]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e01d      	b.n	80027f0 <HAL_RCC_OscConfig+0xcc>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0xb4>
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a75      	ldr	r2, [pc, #468]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b73      	ldr	r3, [pc, #460]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a72      	ldr	r2, [pc, #456]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0xcc>
 80027d8:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a6e      	ldr	r2, [pc, #440]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80027de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a6b      	ldr	r2, [pc, #428]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fe14 	bl	8001424 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fe10 	bl	8001424 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e21f      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b61      	ldr	r3, [pc, #388]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0xdc>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe fe00 	bl	8001424 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe fdfc 	bl	8001424 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e20b      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	4b57      	ldr	r3, [pc, #348]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x104>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d06f      	beq.n	8002936 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002856:	4b50      	ldr	r3, [pc, #320]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b00      	cmp	r3, #0
 8002860:	d017      	beq.n	8002892 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002862:	4b4d      	ldr	r3, [pc, #308]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800286a:	2b08      	cmp	r3, #8
 800286c:	d105      	bne.n	800287a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800286e:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287a:	4b47      	ldr	r3, [pc, #284]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d11c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002886:	4b44      	ldr	r3, [pc, #272]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d116      	bne.n	80028c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	4b41      	ldr	r3, [pc, #260]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_RCC_OscConfig+0x186>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e1d3      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4937      	ldr	r1, [pc, #220]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	e03a      	b.n	8002936 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d020      	beq.n	800290a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c8:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_OscConfig+0x278>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7fe fda9 	bl	8001424 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d6:	f7fe fda5 	bl	8001424 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e1b4      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b28      	ldr	r3, [pc, #160]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4925      	ldr	r1, [pc, #148]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]
 8002908:	e015      	b.n	8002936 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_RCC_OscConfig+0x278>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fd88 	bl	8001424 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002918:	f7fe fd84 	bl	8001424 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e193      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d036      	beq.n	80029b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_RCC_OscConfig+0x27c>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fe fd68 	bl	8001424 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002958:	f7fe fd64 	bl	8001424 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e173      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 800296c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x234>
 8002976:	e01b      	b.n	80029b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_RCC_OscConfig+0x27c>)
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297e:	f7fe fd51 	bl	8001424 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002984:	e00e      	b.n	80029a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002986:	f7fe fd4d 	bl	8001424 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d907      	bls.n	80029a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e15c      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
 8002998:	40023800 	.word	0x40023800
 800299c:	42470000 	.word	0x42470000
 80029a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a4:	4b8a      	ldr	r3, [pc, #552]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 80029a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ea      	bne.n	8002986 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8097 	beq.w	8002aec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c2:	4b83      	ldr	r3, [pc, #524]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	4b7f      	ldr	r3, [pc, #508]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a7e      	ldr	r2, [pc, #504]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
 80029de:	4b7c      	ldr	r3, [pc, #496]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ee:	4b79      	ldr	r3, [pc, #484]	; (8002bd4 <HAL_RCC_OscConfig+0x4b0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d118      	bne.n	8002a2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fa:	4b76      	ldr	r3, [pc, #472]	; (8002bd4 <HAL_RCC_OscConfig+0x4b0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a75      	ldr	r2, [pc, #468]	; (8002bd4 <HAL_RCC_OscConfig+0x4b0>)
 8002a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a06:	f7fe fd0d 	bl	8001424 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0e:	f7fe fd09 	bl	8001424 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e118      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	4b6c      	ldr	r3, [pc, #432]	; (8002bd4 <HAL_RCC_OscConfig+0x4b0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d106      	bne.n	8002a42 <HAL_RCC_OscConfig+0x31e>
 8002a34:	4b66      	ldr	r3, [pc, #408]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	4a65      	ldr	r2, [pc, #404]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a40:	e01c      	b.n	8002a7c <HAL_RCC_OscConfig+0x358>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x340>
 8002a4a:	4b61      	ldr	r3, [pc, #388]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	4a60      	ldr	r2, [pc, #384]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6713      	str	r3, [r2, #112]	; 0x70
 8002a56:	4b5e      	ldr	r3, [pc, #376]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a5d      	ldr	r2, [pc, #372]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0x358>
 8002a64:	4b5a      	ldr	r3, [pc, #360]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	4a59      	ldr	r2, [pc, #356]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a70:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a56      	ldr	r2, [pc, #344]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002a76:	f023 0304 	bic.w	r3, r3, #4
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe fcce 	bl	8001424 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fcca 	bl	8001424 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e0d7      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa2:	4b4b      	ldr	r3, [pc, #300]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ee      	beq.n	8002a8c <HAL_RCC_OscConfig+0x368>
 8002aae:	e014      	b.n	8002ada <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fcb8 	bl	8001424 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fcb4 	bl	8001424 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0c1      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ace:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1ee      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	4a3a      	ldr	r2, [pc, #232]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80ad 	beq.w	8002c50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002af6:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d060      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d145      	bne.n	8002b96 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0a:	4b33      	ldr	r3, [pc, #204]	; (8002bd8 <HAL_RCC_OscConfig+0x4b4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fc88 	bl	8001424 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe fc84 	bl	8001424 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e093      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	019b      	lsls	r3, r3, #6
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	041b      	lsls	r3, r3, #16
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	061b      	lsls	r3, r3, #24
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	071b      	lsls	r3, r3, #28
 8002b62:	491b      	ldr	r1, [pc, #108]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <HAL_RCC_OscConfig+0x4b4>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7fe fc59 	bl	8001424 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b76:	f7fe fc55 	bl	8001424 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e064      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x452>
 8002b94:	e05c      	b.n	8002c50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_RCC_OscConfig+0x4b4>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fc42 	bl	8001424 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe fc3e 	bl	8001424 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e04d      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_RCC_OscConfig+0x4ac>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x480>
 8002bc2:	e045      	b.n	8002c50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e040      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <HAL_RCC_OscConfig+0x538>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d030      	beq.n	8002c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d129      	bne.n	8002c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d122      	bne.n	8002c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d119      	bne.n	8002c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	3b01      	subs	r3, #1
 8002c26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d10f      	bne.n	8002c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800

08002c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e03f      	b.n	8002cf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe fab8 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2224      	movs	r2, #36	; 0x24
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f9cb 	bl	8003040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b08a      	sub	sp, #40	; 0x28
 8002cfe:	af02      	add	r7, sp, #8
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	d17c      	bne.n	8002e14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_UART_Transmit+0x2c>
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e075      	b.n	8002e16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_UART_Transmit+0x3e>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e06e      	b.n	8002e16 <HAL_UART_Transmit+0x11c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2221      	movs	r2, #33	; 0x21
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d4e:	f7fe fb69 	bl	8001424 <HAL_GetTick>
 8002d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	88fa      	ldrh	r2, [r7, #6]
 8002d58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	88fa      	ldrh	r2, [r7, #6]
 8002d5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d68:	d108      	bne.n	8002d7c <HAL_UART_Transmit+0x82>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d104      	bne.n	8002d7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	e003      	b.n	8002d84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d8c:	e02a      	b.n	8002de4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2200      	movs	r2, #0
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f8e2 	bl	8002f62 <UART_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e036      	b.n	8002e16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10b      	bne.n	8002dc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	e007      	b.n	8002dd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1cf      	bne.n	8002d8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2200      	movs	r2, #0
 8002df6:	2140      	movs	r1, #64	; 0x40
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f8b2 	bl	8002f62 <UART_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e006      	b.n	8002e16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b08a      	sub	sp, #40	; 0x28
 8002e22:	af02      	add	r7, sp, #8
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	f040 808c 	bne.w	8002f58 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_UART_Receive+0x2e>
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e084      	b.n	8002f5a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_UART_Receive+0x40>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e07d      	b.n	8002f5a <HAL_UART_Receive+0x13c>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2222      	movs	r2, #34	; 0x22
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e7a:	f7fe fad3 	bl	8001424 <HAL_GetTick>
 8002e7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	88fa      	ldrh	r2, [r7, #6]
 8002e84:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	88fa      	ldrh	r2, [r7, #6]
 8002e8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e94:	d108      	bne.n	8002ea8 <HAL_UART_Receive+0x8a>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	e003      	b.n	8002eb0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002eb8:	e043      	b.n	8002f42 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2120      	movs	r1, #32
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f84c 	bl	8002f62 <UART_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e042      	b.n	8002f5a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	3302      	adds	r3, #2
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	e01f      	b.n	8002f34 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efc:	d007      	beq.n	8002f0e <HAL_UART_Receive+0xf0>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <HAL_UART_Receive+0xfe>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e008      	b.n	8002f2e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1b6      	bne.n	8002eba <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e000      	b.n	8002f5a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
  }
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b090      	sub	sp, #64	; 0x40
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f72:	e050      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d04c      	beq.n	8003016 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f82:	f7fe fa4f 	bl	8001424 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d241      	bcs.n	8003016 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fb2:	637a      	str	r2, [r7, #52]	; 0x34
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fba:	e841 2300 	strex	r3, r2, [r1]
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1e5      	bne.n	8002f92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3314      	adds	r3, #20
 8002fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe6:	623a      	str	r2, [r7, #32]
 8002fe8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fea:	69f9      	ldr	r1, [r7, #28]
 8002fec:	6a3a      	ldr	r2, [r7, #32]
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e5      	bne.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e00f      	b.n	8003036 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4013      	ands	r3, r2
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	bf0c      	ite	eq
 8003026:	2301      	moveq	r3, #1
 8003028:	2300      	movne	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	429a      	cmp	r2, r3
 8003032:	d09f      	beq.n	8002f74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3740      	adds	r7, #64	; 0x40
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003044:	b0c0      	sub	sp, #256	; 0x100
 8003046:	af00      	add	r7, sp, #0
 8003048:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	68d9      	ldr	r1, [r3, #12]
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	ea40 0301 	orr.w	r3, r0, r1
 8003068:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	431a      	orrs	r2, r3
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	431a      	orrs	r2, r3
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003098:	f021 010c 	bic.w	r1, r1, #12
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030a6:	430b      	orrs	r3, r1
 80030a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	6999      	ldr	r1, [r3, #24]
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	ea40 0301 	orr.w	r3, r0, r1
 80030c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4b8f      	ldr	r3, [pc, #572]	; (800330c <UART_SetConfig+0x2cc>)
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d005      	beq.n	80030e0 <UART_SetConfig+0xa0>
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4b8d      	ldr	r3, [pc, #564]	; (8003310 <UART_SetConfig+0x2d0>)
 80030dc:	429a      	cmp	r2, r3
 80030de:	d104      	bne.n	80030ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030e0:	f7ff f8dc 	bl	800229c <HAL_RCC_GetPCLK2Freq>
 80030e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030e8:	e003      	b.n	80030f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030ea:	f7ff f8c3 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 80030ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030fc:	f040 810c 	bne.w	8003318 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003104:	2200      	movs	r2, #0
 8003106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800310a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800310e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003112:	4622      	mov	r2, r4
 8003114:	462b      	mov	r3, r5
 8003116:	1891      	adds	r1, r2, r2
 8003118:	65b9      	str	r1, [r7, #88]	; 0x58
 800311a:	415b      	adcs	r3, r3
 800311c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800311e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003122:	4621      	mov	r1, r4
 8003124:	eb12 0801 	adds.w	r8, r2, r1
 8003128:	4629      	mov	r1, r5
 800312a:	eb43 0901 	adc.w	r9, r3, r1
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800313a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800313e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003142:	4690      	mov	r8, r2
 8003144:	4699      	mov	r9, r3
 8003146:	4623      	mov	r3, r4
 8003148:	eb18 0303 	adds.w	r3, r8, r3
 800314c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003150:	462b      	mov	r3, r5
 8003152:	eb49 0303 	adc.w	r3, r9, r3
 8003156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003166:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800316a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800316e:	460b      	mov	r3, r1
 8003170:	18db      	adds	r3, r3, r3
 8003172:	653b      	str	r3, [r7, #80]	; 0x50
 8003174:	4613      	mov	r3, r2
 8003176:	eb42 0303 	adc.w	r3, r2, r3
 800317a:	657b      	str	r3, [r7, #84]	; 0x54
 800317c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003180:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003184:	f7fd f83e 	bl	8000204 <__aeabi_uldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4b61      	ldr	r3, [pc, #388]	; (8003314 <UART_SetConfig+0x2d4>)
 800318e:	fba3 2302 	umull	r2, r3, r3, r2
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	011c      	lsls	r4, r3, #4
 8003196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800319a:	2200      	movs	r2, #0
 800319c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031a8:	4642      	mov	r2, r8
 80031aa:	464b      	mov	r3, r9
 80031ac:	1891      	adds	r1, r2, r2
 80031ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80031b0:	415b      	adcs	r3, r3
 80031b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031b8:	4641      	mov	r1, r8
 80031ba:	eb12 0a01 	adds.w	sl, r2, r1
 80031be:	4649      	mov	r1, r9
 80031c0:	eb43 0b01 	adc.w	fp, r3, r1
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031d8:	4692      	mov	sl, r2
 80031da:	469b      	mov	fp, r3
 80031dc:	4643      	mov	r3, r8
 80031de:	eb1a 0303 	adds.w	r3, sl, r3
 80031e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031e6:	464b      	mov	r3, r9
 80031e8:	eb4b 0303 	adc.w	r3, fp, r3
 80031ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003200:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003204:	460b      	mov	r3, r1
 8003206:	18db      	adds	r3, r3, r3
 8003208:	643b      	str	r3, [r7, #64]	; 0x40
 800320a:	4613      	mov	r3, r2
 800320c:	eb42 0303 	adc.w	r3, r2, r3
 8003210:	647b      	str	r3, [r7, #68]	; 0x44
 8003212:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003216:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800321a:	f7fc fff3 	bl	8000204 <__aeabi_uldivmod>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4611      	mov	r1, r2
 8003224:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <UART_SetConfig+0x2d4>)
 8003226:	fba3 2301 	umull	r2, r3, r3, r1
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2264      	movs	r2, #100	; 0x64
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	1acb      	subs	r3, r1, r3
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800323a:	4b36      	ldr	r3, [pc, #216]	; (8003314 <UART_SetConfig+0x2d4>)
 800323c:	fba3 2302 	umull	r2, r3, r3, r2
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003248:	441c      	add	r4, r3
 800324a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800324e:	2200      	movs	r2, #0
 8003250:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003254:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003258:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800325c:	4642      	mov	r2, r8
 800325e:	464b      	mov	r3, r9
 8003260:	1891      	adds	r1, r2, r2
 8003262:	63b9      	str	r1, [r7, #56]	; 0x38
 8003264:	415b      	adcs	r3, r3
 8003266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003268:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800326c:	4641      	mov	r1, r8
 800326e:	1851      	adds	r1, r2, r1
 8003270:	6339      	str	r1, [r7, #48]	; 0x30
 8003272:	4649      	mov	r1, r9
 8003274:	414b      	adcs	r3, r1
 8003276:	637b      	str	r3, [r7, #52]	; 0x34
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003284:	4659      	mov	r1, fp
 8003286:	00cb      	lsls	r3, r1, #3
 8003288:	4651      	mov	r1, sl
 800328a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800328e:	4651      	mov	r1, sl
 8003290:	00ca      	lsls	r2, r1, #3
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	4603      	mov	r3, r0
 8003298:	4642      	mov	r2, r8
 800329a:	189b      	adds	r3, r3, r2
 800329c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032a0:	464b      	mov	r3, r9
 80032a2:	460a      	mov	r2, r1
 80032a4:	eb42 0303 	adc.w	r3, r2, r3
 80032a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032c0:	460b      	mov	r3, r1
 80032c2:	18db      	adds	r3, r3, r3
 80032c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c6:	4613      	mov	r3, r2
 80032c8:	eb42 0303 	adc.w	r3, r2, r3
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032d6:	f7fc ff95 	bl	8000204 <__aeabi_uldivmod>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <UART_SetConfig+0x2d4>)
 80032e0:	fba3 1302 	umull	r1, r3, r3, r2
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	2164      	movs	r1, #100	; 0x64
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	3332      	adds	r3, #50	; 0x32
 80032f2:	4a08      	ldr	r2, [pc, #32]	; (8003314 <UART_SetConfig+0x2d4>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	f003 0207 	and.w	r2, r3, #7
 80032fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4422      	add	r2, r4
 8003306:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003308:	e106      	b.n	8003518 <UART_SetConfig+0x4d8>
 800330a:	bf00      	nop
 800330c:	40011000 	.word	0x40011000
 8003310:	40011400 	.word	0x40011400
 8003314:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800331c:	2200      	movs	r2, #0
 800331e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003322:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003326:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800332a:	4642      	mov	r2, r8
 800332c:	464b      	mov	r3, r9
 800332e:	1891      	adds	r1, r2, r2
 8003330:	6239      	str	r1, [r7, #32]
 8003332:	415b      	adcs	r3, r3
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
 8003336:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800333a:	4641      	mov	r1, r8
 800333c:	1854      	adds	r4, r2, r1
 800333e:	4649      	mov	r1, r9
 8003340:	eb43 0501 	adc.w	r5, r3, r1
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	00eb      	lsls	r3, r5, #3
 800334e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003352:	00e2      	lsls	r2, r4, #3
 8003354:	4614      	mov	r4, r2
 8003356:	461d      	mov	r5, r3
 8003358:	4643      	mov	r3, r8
 800335a:	18e3      	adds	r3, r4, r3
 800335c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003360:	464b      	mov	r3, r9
 8003362:	eb45 0303 	adc.w	r3, r5, r3
 8003366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800336a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003376:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003386:	4629      	mov	r1, r5
 8003388:	008b      	lsls	r3, r1, #2
 800338a:	4621      	mov	r1, r4
 800338c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003390:	4621      	mov	r1, r4
 8003392:	008a      	lsls	r2, r1, #2
 8003394:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003398:	f7fc ff34 	bl	8000204 <__aeabi_uldivmod>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4b60      	ldr	r3, [pc, #384]	; (8003524 <UART_SetConfig+0x4e4>)
 80033a2:	fba3 2302 	umull	r2, r3, r3, r2
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	011c      	lsls	r4, r3, #4
 80033aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033bc:	4642      	mov	r2, r8
 80033be:	464b      	mov	r3, r9
 80033c0:	1891      	adds	r1, r2, r2
 80033c2:	61b9      	str	r1, [r7, #24]
 80033c4:	415b      	adcs	r3, r3
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033cc:	4641      	mov	r1, r8
 80033ce:	1851      	adds	r1, r2, r1
 80033d0:	6139      	str	r1, [r7, #16]
 80033d2:	4649      	mov	r1, r9
 80033d4:	414b      	adcs	r3, r1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033e4:	4659      	mov	r1, fp
 80033e6:	00cb      	lsls	r3, r1, #3
 80033e8:	4651      	mov	r1, sl
 80033ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ee:	4651      	mov	r1, sl
 80033f0:	00ca      	lsls	r2, r1, #3
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	4642      	mov	r2, r8
 80033fa:	189b      	adds	r3, r3, r2
 80033fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003400:	464b      	mov	r3, r9
 8003402:	460a      	mov	r2, r1
 8003404:	eb42 0303 	adc.w	r3, r2, r3
 8003408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	67bb      	str	r3, [r7, #120]	; 0x78
 8003416:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003424:	4649      	mov	r1, r9
 8003426:	008b      	lsls	r3, r1, #2
 8003428:	4641      	mov	r1, r8
 800342a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800342e:	4641      	mov	r1, r8
 8003430:	008a      	lsls	r2, r1, #2
 8003432:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003436:	f7fc fee5 	bl	8000204 <__aeabi_uldivmod>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4611      	mov	r1, r2
 8003440:	4b38      	ldr	r3, [pc, #224]	; (8003524 <UART_SetConfig+0x4e4>)
 8003442:	fba3 2301 	umull	r2, r3, r3, r1
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2264      	movs	r2, #100	; 0x64
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	1acb      	subs	r3, r1, r3
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	3332      	adds	r3, #50	; 0x32
 8003454:	4a33      	ldr	r2, [pc, #204]	; (8003524 <UART_SetConfig+0x4e4>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003460:	441c      	add	r4, r3
 8003462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003466:	2200      	movs	r2, #0
 8003468:	673b      	str	r3, [r7, #112]	; 0x70
 800346a:	677a      	str	r2, [r7, #116]	; 0x74
 800346c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003470:	4642      	mov	r2, r8
 8003472:	464b      	mov	r3, r9
 8003474:	1891      	adds	r1, r2, r2
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	415b      	adcs	r3, r3
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003480:	4641      	mov	r1, r8
 8003482:	1851      	adds	r1, r2, r1
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	4649      	mov	r1, r9
 8003488:	414b      	adcs	r3, r1
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003498:	4659      	mov	r1, fp
 800349a:	00cb      	lsls	r3, r1, #3
 800349c:	4651      	mov	r1, sl
 800349e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034a2:	4651      	mov	r1, sl
 80034a4:	00ca      	lsls	r2, r1, #3
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	4642      	mov	r2, r8
 80034ae:	189b      	adds	r3, r3, r2
 80034b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80034b2:	464b      	mov	r3, r9
 80034b4:	460a      	mov	r2, r1
 80034b6:	eb42 0303 	adc.w	r3, r2, r3
 80034ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	663b      	str	r3, [r7, #96]	; 0x60
 80034c6:	667a      	str	r2, [r7, #100]	; 0x64
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034d4:	4649      	mov	r1, r9
 80034d6:	008b      	lsls	r3, r1, #2
 80034d8:	4641      	mov	r1, r8
 80034da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034de:	4641      	mov	r1, r8
 80034e0:	008a      	lsls	r2, r1, #2
 80034e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034e6:	f7fc fe8d 	bl	8000204 <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <UART_SetConfig+0x4e4>)
 80034f0:	fba3 1302 	umull	r1, r3, r3, r2
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	2164      	movs	r1, #100	; 0x64
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	3332      	adds	r3, #50	; 0x32
 8003502:	4a08      	ldr	r2, [pc, #32]	; (8003524 <UART_SetConfig+0x4e4>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	f003 020f 	and.w	r2, r3, #15
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4422      	add	r2, r4
 8003516:	609a      	str	r2, [r3, #8]
}
 8003518:	bf00      	nop
 800351a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800351e:	46bd      	mov	sp, r7
 8003520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003524:	51eb851f 	.word	0x51eb851f

08003528 <memset>:
 8003528:	4402      	add	r2, r0
 800352a:	4603      	mov	r3, r0
 800352c:	4293      	cmp	r3, r2
 800352e:	d100      	bne.n	8003532 <memset+0xa>
 8003530:	4770      	bx	lr
 8003532:	f803 1b01 	strb.w	r1, [r3], #1
 8003536:	e7f9      	b.n	800352c <memset+0x4>

08003538 <__libc_init_array>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	4d0d      	ldr	r5, [pc, #52]	; (8003570 <__libc_init_array+0x38>)
 800353c:	4c0d      	ldr	r4, [pc, #52]	; (8003574 <__libc_init_array+0x3c>)
 800353e:	1b64      	subs	r4, r4, r5
 8003540:	10a4      	asrs	r4, r4, #2
 8003542:	2600      	movs	r6, #0
 8003544:	42a6      	cmp	r6, r4
 8003546:	d109      	bne.n	800355c <__libc_init_array+0x24>
 8003548:	4d0b      	ldr	r5, [pc, #44]	; (8003578 <__libc_init_array+0x40>)
 800354a:	4c0c      	ldr	r4, [pc, #48]	; (800357c <__libc_init_array+0x44>)
 800354c:	f000 f818 	bl	8003580 <_init>
 8003550:	1b64      	subs	r4, r4, r5
 8003552:	10a4      	asrs	r4, r4, #2
 8003554:	2600      	movs	r6, #0
 8003556:	42a6      	cmp	r6, r4
 8003558:	d105      	bne.n	8003566 <__libc_init_array+0x2e>
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003560:	4798      	blx	r3
 8003562:	3601      	adds	r6, #1
 8003564:	e7ee      	b.n	8003544 <__libc_init_array+0xc>
 8003566:	f855 3b04 	ldr.w	r3, [r5], #4
 800356a:	4798      	blx	r3
 800356c:	3601      	adds	r6, #1
 800356e:	e7f2      	b.n	8003556 <__libc_init_array+0x1e>
 8003570:	080035e0 	.word	0x080035e0
 8003574:	080035e0 	.word	0x080035e0
 8003578:	080035e0 	.word	0x080035e0
 800357c:	080035e4 	.word	0x080035e4

08003580 <_init>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr

0800358c <_fini>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr
